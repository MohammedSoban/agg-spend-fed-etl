<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/30/2019 2:32:52 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="US-BCKND"
  DTS:CreatorName="QORDATA\syed.najib"
  DTS:DTSID="{46C5F462-5A75-4D94-9D04-FC12536E090F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.121"
  DTS:LocaleID="1033"
  DTS:ObjectName="File Loader csv"
  DTS:PackageType="5"
  DTS:VersionBuild="531"
  DTS:VersionGUID="{1604AB3D-C6FE-4066-A6BF-A6CAA9F05CED}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{3E59CF6C-9AD7-4A7C-94BA-50538F7AC5A6}"
      DTS:ObjectName="DBConn">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DatabaseName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;User ID=fedusr;Initial Catalog=Fed_Rep_Sol;Integrated Security=True;Application Name=SSIS-File Loader-{3E59CF6C-9AD7-4A7C-94BA-50538F7AC5A6}LocalHost.Fed_Rep_Sol;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAUjQYXnPai0+jGEmQpkUdHwAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABu9wAGWJtLBClrD9VjpRPDAAAAAASAAACgAAAAEAAAAIklpcFLUg/CuzwA3/I3y44QAAAA8bqeUkDJCH3+8pXsiyaB/BQAAADkGSITFIk0AqPJTq9/mrgRw6QhGA</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9F48DE14-4AEF-4C7E-BDB6-AB1DBB676FAC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentYear">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{29C58BCF-AC17-4B2C-B5A5-6DAF89542E73}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Filemask">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{484A5F4C-B233-4E80-A63D-B3B6B796DD40}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Filename">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59B78226-A0B6-4097-8225-7399F1AFBBE2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="File_Id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CF70F06C-8783-4A2D-8283-AC3F60F0631D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsAppend">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F97C95AD-1205-4957-9913-993F33401789}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Prefix">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D46A35A2-B1EB-4159-8FE8-31E00D190DD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{305DD598-8F3C-4361-AF02-CCEC40625FCD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{95E2819F-D20A-46BE-AC07-6A72B5272ADB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Table_Already_Exist">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AA53F048-EDED-4CD8-B59F-BD4221542CF6}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Declare @Year as varchar(max) = (select parameter_value from Parameters where Parameter_Name = 'p_CurrentYear')

select concat('*',prefix,'*') as filemask , prefix, ID as File_ID, Isappend, ISNULL(b.TABLE_NAME,'Y') as Table_Already_Exist
from file_specs A
left join INFORMATION_SCHEMA.TABLES B
on 'LZ_'+@Year+'_'+PREFIX = b.TABLE_NAME
where Isenable = 1
order by len(Prefix) desc</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="{567F690F-1DCF-4B79-8574-18F7C55EBE58}:external"
                  connectionManagerRefId="Project.ConnectionManagers[LocalHost Fed_Rep_Solution]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      name="filemask"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      name="prefix"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      name="File_ID"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      name="Isappend"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      name="filemask" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="prefix" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      dataType="i4"
                      name="File_ID" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      dataType="i4"
                      name="Isappend" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      name="Table_Already_Exist" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      name="filemask" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      name="prefix" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      name="File_ID" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      name="Isappend" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Recordset Destination"
              componentClassID="Microsoft.RecordsetDestination"
              contactInfo="Recordset Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates and populates an in-memory ADO recordset that is available outside of the data flow. Scripts and other package elements can use the recordset. For example, use a recordset to store the names of files that will be loaded into the data warehouse."
              name="Recordset Destination">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the recordset."
                  name="VariableName">User::Filemask</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
                  hasSideEffects="true"
                  name="Recordset Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[filemask]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="102"
                      cachedName="filemask"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[prefix]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="prefix"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[File_ID]"
                      cachedDataType="i4"
                      cachedName="File_ID"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Isappend]"
                      cachedDataType="i4"
                      cachedName="Isappend"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Table_Already_Exist]"
                      cachedDataType="wstr"
                      cachedLength="128"
                      cachedName="Table_Already_Exist"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
              endId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\File Arrived Check"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{27D15696-C22C-40CF-BA8C-C1C2825E2FDB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="File Arrived Check"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
          SQLTask:SqlStatementSource="&#xA;update Parameters&#xA;set Parameter_Value = NULL&#xA;where Parameter_Name = 'p_NewFileArrived'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{3F59B2CD-BBD2-4B20-B5F0-142430D984CD}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{0289922E-4EA6-45D5-A53D-39A2950F46A0}"
        DTS:ObjectName="{0289922E-4EA6-45D5-A53D-39A2950F46A0}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::Filemask" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:DelayValidation="True"
          DTS:Description="Script Task"
          DTS:DTSID="{B73908CF-1DC8-4560-8740-340DF3AC8724}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{CD3D6889-7D4E-4075-9654-84014FD0BF45}"
              DTS:EventID="267090020"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{747B04EC-0DCC-4029-85A5-88DBEEE254D3}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]\Data Flow Task"
                  DTS:CreationName="Microsoft.Pipeline"
                  DTS:Description="Data Flow Task"
                  DTS:DTSID="{E3875C61-82BC-4D7C-ACC8-5A2E20BCEA5B}"
                  DTS:ExecutableType="Microsoft.Pipeline"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Data Flow Task"
                  DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <pipeline
                      version="1" />
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_1569af9514c94b908fba8a307910822e"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CurrentYear,User::File_Id,User::Filename,User::IsAppend,User::P_ArchiveFolder,User::P_SourceFolder,User::Prefix,User::Table_Already_Exist">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="ST_1569af9514c94b908fba8a307910822e.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6EFB5032-6D43-4CCC-ACD7-42303C154BC6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_03b5d6ade1cf4a7ababf2312808a2f3a</RootNamespace>
    <AssemblyName>ST_1569af9514c94b908fba8a307910822e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.VisualBasic" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion
//soban

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Linq;
using System.Data.OleDb;

#endregion

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string SourceFolderPath = Dts.Variables["User::P_SourceFolder"].Value.ToString();
            string ArchiveFolder = Dts.Variables["User::P_ArchiveFolder"].Value.ToString();
            string FileExtension = ".csv";
            string FileDelimiter = "|";
            string ColumnsDataType = "NVARCHAR(MAX)";
            string File_Id = Dts.Variables["User::File_Id"].Value.ToString();
            string Filename = Dts.Variables["User::Filename"].Value.ToString();
            string Prefix = Dts.Variables["User::Prefix"].Value.ToString();
            string CurrentYear = Dts.Variables["User::CurrentYear"].Value.ToString();
            string IsAppend = Dts.Variables["User::IsAppend"].Value.ToString();
            string Table_Already_Exist = Dts.Variables["User::Table_Already_Exist"].Value.ToString();
            string fullFilename = "";
            string ServerName = Dts.Variables["$Project::ServerName"].Value.ToString();
            string DatabaseName = Dts.Variables["$Project::DatabaseName"].Value.ToString();

            string[] fileEntries = Directory.GetFiles(SourceFolderPath, Filename);

            //   string[] fileEntries = { "D:\\FederalReprting\\Agg_Spend_Solution\\Fed_Rep_Sol\\DemoV3\\spech.csv" };

            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

            SqlTransaction objTrans = null;


            /*   int CheckFileStatusBeforeProcessing(string currentFileName)
               {
                  // MessageBox.Show(currentFileName);

                   SqlCommand cmd = new SqlCommand("USP_CheckFileStatusBeforeProcessing", myADONETConnection);
                   cmd.CommandType = CommandType.StoredProcedure;
                   cmd.Parameters.AddWithValue("@fileName", SqlDbType.NVarChar).Value = currentFileName;
                   cmd.Parameters.Add("@status", SqlDbType.Int);
                   cmd.Parameters["@status"].Direction = ParameterDirection.Output;
                   cmd.ExecuteNonQuery();
                   int status = (int)cmd.Parameters["@status"].Value;
                  // MessageBox.Show(status.ToString());
                   return status;
               }
               */

            /******* NEW COLUMNS INTRODUCED TO INCORPORATE AG-2690 ******/

            string CSVFileColumns = "";
            string SQLColumnsList = "";
            int ValidationFlag = 0;
            string SQLQueryToGetMatchingColumn = "";
            string FullTableName = String.Concat("LZ", "_", CurrentYear, "_", Prefix);
            string oringalFetchedSqlColumnList = "";

            ////MessageBox.Show("TABLE NAME:" + FullTableName);

            foreach (string fileName in fileEntries)
            {
                System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                if (fileName.Contains(".csv"))
                {
                    string new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                    try
                    {

                        //Reading file names one by one

                        {
                            // //MessageBox.Show(fileName + ", " + Prefix);

                            //Writing Data of File Into Table
                            fullFilename = fileName;
                            string TableName = "";
                            int counter = 0;
                            string line;
                            string ColumnList = "";
                            string HeadersOfCSV = "";
                            string fd = findDelimiter(fileName);

                            if (fd != "|")
                            {

                                new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                                if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                {
                                    string logging = "update Audit_Logs set [Error Description]='File delimiter is not |.', Start_time=GETDATE(),Status=-1,file_delimiter='" + fd + "',Processed_TimeStamp='" + datetime + "' where FileName='" + new_name_of_file + "'  and status=5";
                                    // MessageBox.Show(logging);
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    loggingStatement.ExecuteNonQuery();

                                }
                                else
                                {
                                    string logging = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status], File_Delimiter,Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "'File delimiter is not |.', GETDATE()" + ",-1,'" + fd + "','" + datetime + "', GETDATE(), GETDATE())";
                                    // MessageBox.Show(logging);

                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    loggingStatement.ExecuteNonQuery();

                                    string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; // fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                    SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                                    Update_WALStatement.ExecuteNonQuery();

                                }


                            }
                            else
                            {
                                new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                                if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                {
                                    string logging = "update Audit_Logs set Start_time=GETDATE(),Status=0,file_delimiter='" + fd + "',Processed_TimeStamp='" + datetime + "' where FileName='" + new_name_of_file + "'  and status=5";
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    //MessageBox.Show(logging);
                                    loggingStatement.ExecuteNonQuery();
                                }
                                else
                                {
                                    string logging = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status], File_Delimiter,Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "' ', GETDATE()" + ",0,'" + fd + "','" + datetime + "', GETDATE(), GETDATE())";
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    //MessageBox.Show(logging);
                                    loggingStatement.ExecuteNonQuery();

                                    string Update_WAL2 = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; //fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                    SqlCommand Update_WAL2Statement = new SqlCommand(Update_WAL2, myADONETConnection);
                                    Update_WAL2Statement.ExecuteNonQuery();
                                }



                            }

                            //System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                            if (Table_Already_Exist != "Y")
                            {

                                CSVFileColumns = File.ReadLines(fullFilename).First();

                                /* SourceFile.Close();
                                 string sqlString = "Select * FROM [" + Path.GetFileName(fullFilename) + "];";
                                 string conStr = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + Path.GetDirectoryName(fullFilename) + ";" + "Extended Properties='text;HDR=YES;'";
                                 // Provider = Microsoft.ACE.OLEDB.12.0
                                 //string conStr = "Provider = Microsoft.ACE.OLEDB.12.0;Data Source=" + Path.GetDirectoryName(fullFilename) + ";" + "Extended Properties='text;HDR=YES;IMEX=1\'";
                                 // ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=1\"";


                                 DataTable theCSV = new DataTable();
                                 OleDbConnection conn = new OleDbConnection(conStr);
                                // FileUploadControl.SaveAs(fullFilename);

                                 conn.Open();
                                 OleDbCommand comm = new OleDbCommand(sqlString, conn);

                                  OleDbDataAdapter adapter = new OleDbDataAdapter(comm);

                                  adapter.Fill(theCSV);
                                  conn.Close();

                                  for (int i = 0; i < theCSV.Columns.Count; i++)
                                  {
                                     // Console.WriteLine(theCSV.Columns[i].ColumnName);
                                      CSVFileColumns += theCSV.Columns[i].ColumnName;
                                  }
                                  */

                                /*  string ConStr;
                                  string HDR;
                                  HDR = "YES";
                                  ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + "D:\\FederalReprting\\Agg_Spend_Solution\\Fed_Rep_Sol\\DemoV3" + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=1\"";
                                  OleDbConnection conn = new OleDbConnection(ConStr);

                                  OleDbCommand oconn = new OleDbCommand("select *  from [" + "spech.csv" + "]", conn);
                                  //cnn.Open();
                                  OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                                  DataTable dt = new DataTable();
                                  adp.Fill(dt);*/

                                CSVFileColumns = CSVFileColumns.Replace(",", "|");
                                CSVFileColumns = CSVFileColumns.Replace(".", "#");
                                CSVFileColumns = CSVFileColumns.Replace("!", "_");
                                CSVFileColumns = CSVFileColumns.Replace("[", "(");
                                CSVFileColumns = CSVFileColumns.Replace("]", ")");


                                SQLQueryToGetMatchingColumn = "select STUFF((Select  ','+Column_Name+''  from Information_schema.Columns where Table_Name= '" + FullTableName + "' and COLUMN_NAME NOT IN ('Filename','PK_ID','isDeleted','Delete_Date') order by ORDINAL_POSITION for xml path(''),TYPE).value('.','NVARCHAR(MAX)'),1,1,'') AS ColumnList";


                                //Get Matching Column List from SQL Server

                                SqlCommand cmd = myADONETConnection.CreateCommand();
                                cmd.CommandText = SQLQueryToGetMatchingColumn;
                                SQLColumnsList = (string)cmd.ExecuteScalar();

                                /* SQLColumnsList = "";

                               string sqlConStr = "Provider=SQLOLEDB;Data Source="+ServerName+";Initial Catalog="+DatabaseName+";Integrated Security=SSPI";
                               // string getsqlColumns = " select COLUMN_NAME from Information_schema.Columns where TABLE_NAME= '"+FullTableName+"' and COLUMN_NAME NOT IN('Filename','PK_ID','isDeleted','Delete_Date') order by ORDINAL_POSITION ";
                                string getsqlColumns = "select * from lz_2022_spech where 1=2";

                                DataTable theSQLDt = new DataTable();
                                OleDbConnection sqlCon = new OleDbConnection(sqlConStr);
                                // FileUploadControl.SaveAs(fullFilename);

                                sqlCon.Open();
                                OleDbCommand sqlComm = new OleDbCommand(getsqlColumns, sqlCon);

                                OleDbDataAdapter Sqladapter = new OleDbDataAdapter(sqlComm);

                                Sqladapter.Fill(theSQLDt);
                                sqlCon.Close();

                                for (int i = 0; i < theSQLDt.Rows.Count; i++)
                                {
                                    // Console.WriteLine(theCSV.Columns[i].ColumnName);
                                    SQLColumnsList += theSQLDt.Rows[i]["COLUMN_NAME"].ToString() + "|"; 
                                }
                                */
                                SQLColumnsList = SQLColumnsList.Replace(",", "|");
                                oringalFetchedSqlColumnList = SQLColumnsList;
                                SQLColumnsList = SQLColumnsList.Replace(".", "#");
                                SQLColumnsList = SQLColumnsList.Replace("!", "_");
                                SQLColumnsList = SQLColumnsList.Replace("[", "(");
                                SQLColumnsList = SQLColumnsList.Replace("]", ")");
                                //MessageBox.Show("YTD CSV Matching Columns: " + CSVFileColumns);
                                //MessageBox.Show("YTD LZ TABLE Matching Columns: " + SQLColumnsList);




                                if (string.Equals(CSVFileColumns, SQLColumnsList))
                                {
                                    ValidationFlag = 1;
                                    //  SourceFile = new System.IO.StreamReader(fileName);
                                }
                                else
                                {
                                    ValidationFlag = 0;
                                }


                                if (ValidationFlag == 0)
                                {
                                    string updateQuery_DML = "update Audit_Logs set status = @status, [Error Description] = @errorDescription, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE [ID] = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')";

                                    string errorDescription = "Please upload the file with same format as of previous files";
                                    SqlCommand updateQuery_DML_CMD = new SqlCommand(updateQuery_DML, myADONETConnection);
                                    updateQuery_DML_CMD.Parameters.AddWithValue("@status", "-1".ToString());
                                    updateQuery_DML_CMD.Parameters.AddWithValue("@errorDescription", errorDescription);

                                    //MessageBox.Show(updateQuery_DML);

                                    updateQuery_DML_CMD.ExecuteNonQuery();

                                    // MOVING THE FILE TO 'FAILED_FILES' FOLDER'
                                    SourceFile.Close();

                                    File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + fileName.Replace(SourceFolderPath, "").Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);

                                    // SKIP THIS ITERATION OF FILE
                                    continue;

                                }
                            }
                            //SourceFile.Open();
                            objTrans = myADONETConnection.BeginTransaction();
                            while ((line = SourceFile.ReadLine()) != null & fd == "|")
                            {

                                if (counter == 0)
                                {
                                    if (Convert.ToInt32(IsAppend) == Convert.ToInt32(1) && Table_Already_Exist != "Y")
                                    {
                                        HeadersOfCSV = "[" + oringalFetchedSqlColumnList.Replace(FileDelimiter, "],[") + "]";
                                        HeadersOfCSV = HeadersOfCSV + ",[Filename]";

                                    }
                                    else
                                    {
                                        HeadersOfCSV = "[" + line.Replace(FileDelimiter, "],[") + "]";
                                        HeadersOfCSV = HeadersOfCSV + ",[Filename]";

                                    }
                                    //  else { 
                                    // HeadersOfCSV = "[" + CSVFileColumns.Replace(FileDelimiter, "],[") + "]";
                                    //HeadersOfCSV = HeadersOfCSV + ",[Filename]";
                                    //HeadersOfCSV = "[" + CSVFileColumns.Replace(FileDelimiter, "],[") + "]";
                                    // HeadersOfCSV = HeadersOfCSV + ",[Filename]";
                                    // }
                                }

                                ColumnList = "[" + line.Replace(FileDelimiter, "],[") + "]";
                                TableName = Prefix; // (((fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "")).Replace("\\", ""));
                                //if file is YTD
                                if (Convert.ToInt32(IsAppend) == Convert.ToInt32(0))
                                {
                                    ValidationFlag = 1;

                                    if (counter == 0 && ValidationFlag == 1)
                                    {
                                        string DropTableStatement = "IF EXISTS (SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U') DROP TABLE [LZ_" + CurrentYear + "_" + TableName + "];";
                                        SqlCommand DropStatement = new SqlCommand(DropTableStatement, myADONETConnection, objTrans);
                                        DropStatement.ExecuteNonQuery();


                                        string CreateTableStatement = " Create Table LZ_" + CurrentYear + "_" + TableName;
                                        CreateTableStatement += "(Filename nvarchar(max),[" + line.Replace(FileDelimiter, "] " + ColumnsDataType + ",[") + "] " + ColumnsDataType + ")";
                                        ////MessageBox.Show(CreateTableStatement);
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, myADONETConnection, objTrans);
                                        CreateTableCmd.ExecuteNonQuery();

                                        string logging_1 = "UPDATE [Audit_Logs] SET [Status] = 1, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                                        ////MessageBox.Show(logging_1);
                                        SqlCommand logging_1Statement = new SqlCommand(logging_1, myADONETConnection, objTrans);
                                        logging_1Statement.ExecuteNonQuery();

                                        string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection, objTrans);
                                        AltertableStatement.ExecuteNonQuery();

                                        string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection, objTrans);
                                        isDeleteColumnStatement.ExecuteNonQuery();

                                        string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection, objTrans);
                                        deleteDateColumnStatement.ExecuteNonQuery();


                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection, objTrans);
                                        FileArrivedtatement.ExecuteNonQuery();


                                    }
                                    else
                                    {

                                        //  string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]";// (" + ColumnList + ") ";
                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " (" + HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "' )";
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection, objTrans);
                                        myCommand1.ExecuteNonQuery();

                                        // //MessageBox.Show(query.ToString());


                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection, objTrans);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection, objTrans);
                                        FileArrivedtatement.ExecuteNonQuery();


                                    }
                                }//if file is append
                                else
                                {

                                    if ((counter != 0) && (Table_Already_Exist != Convert.ToString('Y')))
                                    {

                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " (" + HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "')";
                                        ////MessageBox.Show(fd + ',' + counter + ',' + Table_Already_Exist);
                                        ////MessageBox.Show(query.ToString());
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection, objTrans);
                                        myCommand1.ExecuteNonQuery();

                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection, objTrans);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection, objTrans);
                                        FileArrivedtatement.ExecuteNonQuery();

                                    }
                                    else if ((counter == 0) && (Table_Already_Exist == Convert.ToString('Y')))
                                    {

                                        string DropTableStatement = "IF EXISTS (SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U') DROP TABLE [LZ_" + CurrentYear + "_" + TableName + "];";
                                        SqlCommand DropStatement = new SqlCommand(DropTableStatement, myADONETConnection, objTrans);
                                        DropStatement.ExecuteNonQuery();

                                        string CreateTableStatement = " Create Table LZ_" + CurrentYear + "_" + TableName;
                                        CreateTableStatement += "(Filename nvarchar(max),[" + line.Replace(FileDelimiter, "] " + ColumnsDataType + ",[") + "] " + ColumnsDataType + ")";
                                        ////MessageBox.Show(CreateTableStatement);
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, myADONETConnection, objTrans);
                                        CreateTableCmd.ExecuteNonQuery();

                                        string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                        SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection, objTrans);
                                        AltertableStatement.ExecuteNonQuery();

                                        string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection, objTrans);
                                        isDeleteColumnStatement.ExecuteNonQuery();

                                        string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection, objTrans);
                                        deleteDateColumnStatement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection, objTrans);
                                        FileArrivedtatement.ExecuteNonQuery();



                                    }
                                    else if ((counter != 0) && (Table_Already_Exist == Convert.ToString('Y')))
                                    {
                                        // string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]";// (" + ColumnList + ") ";
                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " (" + HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "')";
                                        ////MessageBox.Show(query.ToString());
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection, objTrans);
                                        myCommand1.ExecuteNonQuery();


                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection, objTrans);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection, objTrans);
                                        FileArrivedtatement.ExecuteNonQuery();

                                    }


                                }

                                counter++;

                            }
                            objTrans.Commit();

                            //Moving processed files to archive
                            if (fd == "|")
                            {
                                SourceFile.Close();
                                //   //MessageBox.Show(ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                                File.Move(fileName, ArchiveFolder + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);
                                // File.Move(fileName, ArchiveFolder + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                            }

                            if (fd != "|")
                            {

                                SourceFile.Close();
                                File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);

                                // File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                            }

                            string logging_3 = "UPDATE [Audit_Logs] SET [Status] = 4, End_time = GETDATE() ,Processed_TimeStamp='" + datetime + "' WHERE File_Delimiter = '|' and ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status=2 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                            SqlCommand logging_3Statement = new SqlCommand(logging_3, myADONETConnection);
                            logging_3Statement.ExecuteNonQuery();

                            string FileArrived_Final = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                            SqlCommand FileArrivedtatement_Final = new SqlCommand(FileArrived_Final, myADONETConnection);
                            FileArrivedtatement_Final.ExecuteNonQuery();


                            Dts.TaskResult = (int)ScriptResults.Success;
                        }
                    }


                    catch (Exception e)
                    {
                        //  MessageBox.Show(e.Message);
                        //  //MessageBox.Show(fileName);
                        // System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                        // Create Logs for Errors

                        /*SqlConnection myADONETConnection = new SqlConnection();
                        myADONETConnection = (SqlConnection)
                        (Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);*/


                        new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                        if (objTrans != null)
                        {
                            objTrans.Rollback();
                        }

                        if (e.Message.ToString() == "Could not find a part of the path.")
                        {
                            string logging_4 = "UPDATE [Audit_Logs] SET [Status] = 2, [Error Description]='Could not find a part of the path.', End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                            ////MessageBox.Show("Exception query: " + logging_4.ToString());
                            SqlCommand myCommand1 = new SqlCommand(logging_4, myADONETConnection);
                            myCommand1.ExecuteNonQuery();
                        }
                        else
                        {
                            string logging_4 = "UPDATE [Audit_Logs] SET [Status] = -1, [Error Description] = '" + e.Message.Replace("'", "") + "', End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')"; ;
                            ////MessageBox.Show("Exception query: " + logging_4.ToString());
                            SqlCommand myCommand1 = new SqlCommand(logging_4, myADONETConnection);
                            myCommand1.ExecuteNonQuery();


                            string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; // fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'"; 
                            SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                            Update_WALStatement.ExecuteNonQuery();


                        }

                        // //MessageBox.Show(fileName);
                        // //MessageBox.Show(ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);


                        SourceFile.Close();
                        //File.Move(fileName, ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                        //SourceFile.Close();
                        //MessageBox.Show(ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);
                        File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);

                    }
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion// Checking File Delimiter}

        public static string findDelimiter(string strFilename)
        {
            // define delimiters of interest
            string[] delimiters = new string[] { "|", ";", ",", "||", "'" };

            // test file against delimiters
            for (int delcnt = 0; delcnt < delimiters.Length; delcnt++)
            {
                using (Microsoft.VisualBasic.FileIO.TextFieldParser parser = new Microsoft.VisualBasic.FileIO.TextFieldParser(strFilename))
                {
                    // setup parser
                    parser.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited;
                    parser.SetDelimiters(delimiters[delcnt]);
                    parser.HasFieldsEnclosedInQuotes = true;

                    if (!parser.EndOfData)
                    {
                        // parse
                        string[] fields = parser.ReadFields();
                        // if we get more than one field, we have found the correct delimiter
                        if (fields.Length > 1)
                            return delimiters[delcnt];
                    }
                }
            } // end_of_for (int delcnt = 0; delcnt < delimiters.Length; delcnt++)
            return null;
        }

        public int CheckFileStatusBeforeProcessing(string currentFileName)
        {
            // MessageBox.Show(currentFileName);
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

            SqlCommand cmd = new SqlCommand("USP_CheckFileStatusBeforeProcessing", myADONETConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@fileName", SqlDbType.NVarChar).Value = currentFileName;
            cmd.Parameters.Add("@status", SqlDbType.Int);
            cmd.Parameters["@status"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            int status = (int)cmd.Parameters["@status"].Value;
            // MessageBox.Show(status.ToString());
            return status;
        }

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_1569af9514c94b908fba8a307910822e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_1569af9514c94b908fba8a307910822e</msb:DisplayName>
		<msb:ProjectId>{0D2AFA2C-3B09-49B6-BD54-DBED377F92D8}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_1569af9514c94b908fba8a307910822e.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Settings.get_Default():ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Sett" +
    "ings")]

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_03b5d6ade1cf4a7ababf2312808a2f3a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_03b5d6ade1cf4a7ababf2312808a2f3a")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_1569af9514c94b908fba8a307910822e.dll">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
hhgKBwYABADPMwAAAACRGBAHzAEEAAAAAQCuAQAAAQCeAQAAAQBlBAkACgcBABEACgcGABkACgcK
ACkACgcQADEACgcQADkACgcQAEEACgcQAEkACgcQAFEACgcQAFkACgcQAGEACgcQAGkACgcGALEA
CgcGANkACgcVAOkACgcGAIkA7ghMAIkAigRRAHEAdAhWAPEA5wdbAPkAVAVgAAEBRARnALkAigRr
AAkB9QdvAHkACgcGAPEAPwh2ABEBVAV8APEAqgVnABkBEQaDACEBigiIAJEACgcQACEBNgiOACEB
MQGTACEBigiZACEBKQmgACkBCgemADEBAwmtADkB/gexAEkB2Ai7AHkA9ADMADEB3ggQADEBhwZn
ACEBLwigACkBTwjSAFEBWATYAGEBiAIGADkBawTgAHkA1wXmAGkBDwDrAGkBDwDwACEBigj1ACkB
Cgf7ACEBiggEAWkBigQMASEBHQmgAGEB4wFrAHEBmAgGAPEAqwgBAHEBswQGAJkASQFrAKEACgcQ
AKEA9gEaAaEAXgghAaEACAgnAaEAngAsAaEAKgcwAYEBjgIGADEBCAI6AZkBTgRBAVEB5gBGAVEB
VAVQAZkBMQZXAZkBRARnAHEACgcGALkACgcGALEBhwFeAbEB9ghnAcEACgdtAeEACgcGAAgAFACQ
AQgAGACVASkAcwAHAi4ACwDfAS4AEwDoAS4AGwAHAi4AIwAQAi4AKwA5Ai4AMwA5Ai4AOwA5Ai4A
QwAQAi4ASwA/Ai4AUwA5Ai4AWwBWAkMAYwCVAUkAcwAHAmEAewCVAWMAawCVARsAEQE1AQMAAQAE
AAMAAACxBtABAABMAtUBAACjCNoBAgAGAAMAAgAHAAUAAQAIAAUAAgAJAAcABIAAAAEAAADCIeI3
AAAAAAAADQEAAAQAAAAAAAAAAAAAAHUBrAAAAAAADgAAAAAAAAAAAAAAfgG8BAAAAAAEAAAAAAAA
AAAAAAB1AZIAAAAAAAoAAAAAAAAAAAAAAIcB0AAAAAAABAAAAAAAAAAAAAAAdQFdBQAAAAAOAAAA
AAAAAAAAAAB+AUcAAAAAAAQAAAAAAAAAAAAAAHUBGAIAAAAAAAAAAAEAAABmBwAABQACAE0AyAAA
AABJRW51bWVyYWJsZWAxAFRvSW50MzIAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5WaXN1
YWxCYXNpYy5GaWxlSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU1Rf
MDNiNWQ2YWRlMWNmNGE3YWJhYmYyMzEyODA4YTJmM2EAU3lzdGVtLkRhdGEAZ2V0X0VuZE9mRGF0
YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBNaWNyb3NvZnQuVmlzdWFsQmFz
aWMAQWRkAERiQ29tbWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAU1RfMTU2OWFmOTUxNGM5
NGI5MDhmYmE4YTMwNzkxMDgyMmUAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UA
VmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBGaWxlAGN1cnJlbnRGaWxlTmFtZQBzdHJGaWxlbmFtZQBEYXRlVGltZQBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFJlYWRMaW5lAFNxbERiVHlwZQBzZXRfVGV4dEZp
ZWxkVHlwZQBzZXRfQ29tbWFuZFR5cGUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFw
cGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUAQWRkV2l0aFZhbHVlAHZhbHVlAE1vdmUAU3lz
dGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBDaGVja0ZpbGVTdGF0dXNCZWZvcmVQcm9j
ZXNzaW5nAFJvbGxiYWNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5D
b21wb25lbnRNb2RlbABTVF8xNTY5YWY5NTE0Yzk0YjkwOGZiYThhMzA3OTEwODIyZS5kbGwAZ2V0
X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBTeXN0ZW0uQ29uZmlndXJh
dGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24ARGJUcmFuc2FjdGlvbgBT
cWxUcmFuc2FjdGlvbgBCZWdpblRyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFt
ZXRlckNvbGxlY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBzZXRfRGlyZWN0
aW9uAFBhcmFtZXRlckRpcmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1
cmVJbmZvAFN5c3RlbS5MaW5xAEV4ZWN1dGVTY2FsYXIAU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBUZXh0RmllbGRQYXJzZXIARGJQ
YXJhbWV0ZXIAU3FsUGFyYW1ldGVyAGZpbmREZWxpbWl0ZXIALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBSZWFkRmllbGRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTVF8wM2I1ZDZhZGUxY2Y0YTdhYmFiZjIzMTI4MDhhMmYzYS5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMDNiNWQ2YWRlMWNmNGE3
YWJhYmYyMzEyODA4YTJmM2EuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFJlYWRM
aW5lcwBzZXRfSGFzRmllbGRzRW5jbG9zZWRJblF1b3RlcwBTZXR0aW5ncwBFcXVhbHMAQ29udGFp
bnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFNldERlbGltaXRlcnMAU3VjY2VzcwBn
ZXRfRHRzAFNjcmlwdFJlc3VsdHMAQ29uY2F0AE9iamVjdABDb21taXQAZ2V0X0RlZmF1bHQAc2V0
X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AENvbnZlcnQARmlyc3QAc2V0X0NvbW1h
bmRUZXh0AGdldF9Ob3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBEaXJlY3RvcnkAb3Bf
RXF1YWxpdHkAb3BfSW5lcXVhbGl0eQAAAB15AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMAAClV
AHMAZQByADoAOgBQAF8AUwBvAHUAcgBjAGUARgBvAGwAZABlAHIAACtVAHMAZQByADoAOgBQAF8A
QQByAGMAaABpAHYAZQBGAG8AbABkAGUAcgAACS4AYwBzAHYAAAN8AAAbTgBWAEEAUgBDAEgAQQBS
ACgATQBBAFgAKQAAG1UAcwBlAHIAOgA6AEYAaQBsAGUAXwBJAGQAAB1VAHMAZQByADoAOgBGAGkA
bABlAG4AYQBtAGUAABlVAHMAZQByADoAOgBQAHIAZQBmAGkAeAAAI1UAcwBlAHIAOgA6AEMAdQBy
AHIAZQBuAHQAWQBlAGEAcgAAHVUAcwBlAHIAOgA6AEkAcwBBAHAAcABlAG4AZAAAM1UAcwBlAHIA
OgA6AFQAYQBiAGwAZQBfAEEAbAByAGUAYQBkAHkAXwBFAHgAaQBzAHQAAAEAKSQAUAByAG8AagBl
AGMAdAA6ADoAUwBlAHIAdgBlAHIATgBhAG0AZQAALSQAUAByAG8AagBlAGMAdAA6ADoARABhAHQA
YQBiAGEAcwBlAE4AYQBtAGUAAA1EAEIAQwBvAG4AbgAABUwAWgAAA18AAANcAACA63UAcABkAGEA
dABlACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAHMAZQB0ACAAWwBFAHIAcgBvAHIAIABEAGUAcwBj
AHIAaQBwAHQAaQBvAG4AXQA9ACcARgBpAGwAZQAgAGQAZQBsAGkAbQBpAHQAZQByACAAaQBzACAA
bgBvAHQAIAB8AC4AJwAsACAAUwB0AGEAcgB0AF8AdABpAG0AZQA9AEcARQBUAEQAQQBUAEUAKAAp
ACwAUwB0AGEAdAB1AHMAPQAtADEALABmAGkAbABlAF8AZABlAGwAaQBtAGkAdABlAHIAPQAnAAEv
JwAsAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAElJwAgAHcAaABl
AHIAZQAgAEYAaQBsAGUATgBhAG0AZQA9ACcAAR8nACAAIABhAG4AZAAgAHMAdABhAHQAdQBzAD0A
NQABgTtJAE4AUwBFAFIAVAAgAEkATgBUAE8AIABbAEEAdQBkAGkAdABfAEwAbwBnAHMAXQAgACgA
WwBGAEkATABFAF8ASQBEAF0ALABbAEYAaQBsAGUATgBhAG0AZQBdACwAWwBFAHIAcgBvAHIAIABE
AGUAcwBjAHIAaQBwAHQAaQBvAG4AXQAsAFMAdABhAHIAdABfAHQAaQBtAGUALABbAFMAdABhAHQA
dQBzAF0ALAAgAEYAaQBsAGUAXwBEAGUAbABpAG0AaQB0AGUAcgAsAFAAcgBvAGMAZQBzAHMAZQBk
AF8AVABpAG0AZQBTAHQAYQBtAHAALABJAG4AcwBlAHIAdABfAEQAYQB0AGUALABVAHAAZABhAHQA
ZQBkAF8ARABhAHQAZQApACAAVgBBAEwAVQBFAFMAIAAoAAAFLAAnAAFZJwAsACcARgBpAGwAZQAg
AGQAZQBsAGkAbQBpAHQAZQByACAAaQBzACAAbgBvAHQAIAB8AC4AJwAsACAARwBFAFQARABBAFQA
RQAoACkALAAtADEALAAnAAEHJwAsACcAATEnACwAIABHAEUAVABEAEEAVABFACgAKQAsACAARwBF
AFQARABBAFQARQAoACkAKQABgY11AHAAZABhAHQAZQAgAEEAIABzAGUAdAAgAHMAdABhAHQAdQBz
ACAAPQAgADMAIABmAHIAbwBtACAAVwBlAGIAQQB0AHQAYQBjAGgAbQBlAG4AdABMAG8AZwBzACAA
QQAgAGkAbgBuAGUAcgAgAGoAbwBpAG4AIAAoAHMAZQBsAGUAYwB0ACAARgBpAGwAZQBOAGEAbQBl
ACwAIABtAGEAeAAoAGkAZAApACAAYQBzACAAaQBkACAAZgByAG8AbQAgAFcAZQBiAEEAdAB0AGEA
YwBoAG0AZQBuAHQATABvAGcAcwAgAGcAcgBvAHUAcAAgAGIAeQAgAEYAaQBsAGUATgBhAG0AZQAp
AEIAIABvAG4AIABhAC4ARgBpAGwAZQBOAGEAbQBlACAAPQAgAGIALgBGAGkAbABlAE4AYQBtAGUA
IABhAG4AZAAgAGEALgBJAGQAIAA9ACAAYgAuAGkAZAAgAHcAaABlAHIAZQAgAGEALgBGAGkAbABl
AE4AYQBtAGUAIAA9ACAAJwABAycAAYCJdQBwAGQAYQB0AGUAIABBAHUAZABpAHQAXwBMAG8AZwBz
ACAAcwBlAHQAIABTAHQAYQByAHQAXwB0AGkAbQBlAD0ARwBFAFQARABBAFQARQAoACkALABTAHQA
YQB0AHUAcwA9ADAALABmAGkAbABlAF8AZABlAGwAaQBtAGkAdABlAHIAPQAnAAEpJwAsACcAIAAn
ACwAIABHAEUAVABEAEEAVABFACgAKQAsADAALAAnAAEDWQAAAywAAAMuAAADIwAAAyEAAANbAAAD
KAAAA10AAAMpAACAu3MAZQBsAGUAYwB0ACAAUwBUAFUARgBGACgAKABTAGUAbABlAGMAdAAgACAA
JwAsACcAKwBDAG8AbAB1AG0AbgBfAE4AYQBtAGUAKwAnACcAIAAgAGYAcgBvAG0AIABJAG4AZgBv
AHIAbQBhAHQAaQBvAG4AXwBzAGMAaABlAG0AYQAuAEMAbwBsAHUAbQBuAHMAIAB3AGgAZQByAGUA
IABUAGEAYgBsAGUAXwBOAGEAbQBlAD0AIAAnAAGBUycAIABhAG4AZAAgAEMATwBMAFUATQBOAF8A
TgBBAE0ARQAgAE4ATwBUACAASQBOACAAKAAnAEYAaQBsAGUAbgBhAG0AZQAnACwAJwBQAEsAXwBJ
AEQAJwAsACcAaQBzAEQAZQBsAGUAdABlAGQAJwAsACcARABlAGwAZQB0AGUAXwBEAGEAdABlACcA
KQAgAG8AcgBkAGUAcgAgAGIAeQAgAE8AUgBEAEkATgBBAEwAXwBQAE8AUwBJAFQASQBPAE4AIABm
AG8AcgAgAHgAbQBsACAAcABhAHQAaAAoACcAJwApACwAVABZAFAARQApAC4AdgBhAGwAdQBlACgA
JwAuACcALAAnAE4AVgBBAFIAQwBIAEEAUgAoAE0AQQBYACkAJwApACwAMQAsADEALAAnACcAKQAg
AEEAUwAgAEMAbwBsAHUAbQBuAEwAaQBzAHQAAYD9dQBwAGQAYQB0AGUAIABBAHUAZABpAHQAXwBM
AG8AZwBzACAAcwBlAHQAIABzAHQAYQB0AHUAcwAgAD0AIABAAHMAdABhAHQAdQBzACwAIABbAEUA
cgByAG8AcgAgAEQAZQBzAGMAcgBpAHAAdABpAG8AbgBdACAAPQAgAEAAZQByAHIAbwByAEQAZQBz
AGMAcgBpAHAAdABpAG8AbgAsACAARQBuAGQAXwB0AGkAbQBlACAAPQAgAEcARQBUAEQAQQBUAEUA
KAApACwAIABQAHIAbwBjAGUAcwBzAGUAZABfAFQAaQBtAGUAUwB0AGEAbQBwACAAPQAgACcAAYCD
JwAgAFcASABFAFIARQAgAFsASQBEAF0AIAA9ACAAKABTAEUATABFAEMAVAAgAE0AQQBYACgASQBE
ACkAIABGAFIATwBNACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAFcASABFAFIARQAgAFsARgBJAEwA
RQBfAEkARABdACAAPQAgAAFvIABhAG4AZAAgAFMAdABhAHQAdQBzACEAPQAtADEAIABhAG4AZAAg
AEQAZQBsAGUAdABlAF8ARgBpAGwAZQBfAFMAdABhAHQAdQBzAD0AMAAgAGEAbgBkACAARgBpAGwA
ZQBOAGEAbQBlAD0AJwABBScAKQABeVAAbABlAGEAcwBlACAAdQBwAGwAbwBhAGQAIAB0AGgAZQAg
AGYAaQBsAGUAIAB3AGkAdABoACAAcwBhAG0AZQAgAGYAbwByAG0AYQB0ACAAYQBzACAAbwBmACAA
cAByAGUAdgBpAG8AdQBzACAAZgBpAGwAZQBzAAAPQABzAHQAYQB0AHUAcwAABS0AMQABI0AAZQBy
AHIAbwByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAD0EAcgBjAGgAaQB2AGUAABlGAGEAaQBsAGUA
ZABfAEYAaQBsAGUAcwAAB10ALABbAAAXLABbAEYAaQBsAGUAbgBhAG0AZQBdAABtSQBGACAARQBY
AEkAUwBUAFMAIAAoAFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAG8AYgBqAGUA
YwB0AHMAIABXAEgARQBSAEUAIABuAGEAbQBlACAAPQAgACcATABaAF8AAUMnACAAQQBOAEQAIAB0
AHkAcABlACAAPQAgACcAVQAnACkAIABEAFIATwBQACAAVABBAEIATABFACAAWwBMAFoAXwABBV0A
OwAAIyAAQwByAGUAYQB0AGUAIABUAGEAYgBsAGUAIABMAFoAXwAAMygARgBpAGwAZQBuAGEAbQBl
ACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQAsAFsAAAVdACAAAAUsAFsAAICjVQBQAEQAQQBU
AEUAIABbAEEAdQBkAGkAdABfAEwAbwBnAHMAXQAgAFMARQBUACAAWwBTAHQAYQB0AHUAcwBdACAA
PQAgADEALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEAVABFACgAKQAsACAAUABy
AG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAA9ACcAAX8nACAAVwBIAEUAUgBFACAA
SQBEACAAPQAgACgAUwBFAEwARQBDAFQAIABNAEEAWAAoAEkARAApACAARgBSAE8ATQAgAEEAdQBk
AGkAdABfAEwAbwBnAHMAIABXAEgARQBSAEUAIABbAEYASQBMAEUAXwBJAEQAXQAgAD0AIAABIUEA
TABUAEUAUgAgAFQAQQBCAEwARQAgAFsATABaAF8AADtdACAAYQBkAGQAIABQAEsAXwBJAEQAIABJ
AE4AVAAgAEkARABFAE4AVABJAFQAWQAoADEALAAxACkAAE9dACAAYQBkAGQAIABpAHMARABlAGwA
ZQB0AGUAZAAgAEkATgBUACAATgBPAFQAIABOAFUATABMACAAZABlAGYAYQB1AGwAdAAgACAAMAAA
gItdACAAYQBkAGQAIABEAGUAbABlAHQAZQBfAEQAYQB0AGUAIABkAGEAdABlAHQAaQBtAGUAIABu
AG8AdAAgAG4AdQBsAGwAIABkAGUAZgBhAHUAbAB0ACAAJwAxADgAMAAwAC0AMAA3AC0AMQA2ACAA
MAAwADoAMAAwADoAMAAwAC4AMAAwADAAJwABgKt1AHAAZABhAHQAZQAgAFAAYQByAGEAbQBlAHQA
ZQByAHMAIABzAGUAdAAgAFAAYQByAGEAbQBlAHQAZQByAF8AVgBhAGwAdQBlACAAPQAgACcAMQAn
ACAAdwBoAGUAcgBlACAAUABhAHIAYQBtAGUAdABlAHIAXwBOAGEAbQBlACAAPQAgACcAcABfAE4A
ZQB3AEYAaQBsAGUAQQByAHIAaQB2AGUAZAAnAAEhSQBuAHMAZQByAHQAIABpAG4AdABvACAAWwBM
AFoAXwAAB10AIAAoAAARVgBBAEwAVQBFAFMAKAAnAAEFJwAnAAEJJwAsACAAJwABBycAIAApAAGA
o1UAUABEAEEAVABFACAAWwBBAHUAZABpAHQAXwBMAG8AZwBzAF0AIABTAEUAVAAgAFsAUwB0AGEA
dAB1AHMAXQAgAD0AIAAyACwAIABFAG4AZABfAHQAaQBtAGUAIAA9ACAARwBFAFQARABBAFQARQAo
ACkALAAgAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAGAo1UAUABE
AEEAVABFACAAWwBBAHUAZABpAHQAXwBMAG8AZwBzAF0AIABTAEUAVAAgAFsAUwB0AGEAdAB1AHMA
XQAgAD0AIAA0ACwAIABFAG4AZABfAHQAaQBtAGUAIAA9ACAARwBFAFQARABBAFQARQAoACkAIAAs
AFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAGAsScAIABXAEgARQBS
AEUAIABGAGkAbABlAF8ARABlAGwAaQBtAGkAdABlAHIAIAA9ACAAJwB8ACcAIABhAG4AZAAgAEkA
RAAgAD0AIAAoAFMARQBMAEUAQwBUACAATQBBAFgAKABJAEQAKQAgAEYAUgBPAE0AIABBAHUAZABp
AHQAXwBMAG8AZwBzACAAVwBIAEUAUgBFACAAWwBGAEkATABFAF8ASQBEAF0AIAA9ACAAAWsgAGEA
bgBkACAAUwB0AGEAdAB1AHMAPQAyACAAYQBuAGQAIABEAGUAbABlAHQAZQBfAEYAaQBsAGUAXwBT
AHQAYQB0AHUAcwA9ADAAIABhAG4AZAAgAEYAaQBsAGUATgBhAG0AZQA9ACcAAUVDAG8AdQBsAGQA
IABuAG8AdAAgAGYAaQBuAGQAIABhACAAcABhAHIAdAAgAG8AZgAgAHQAaABlACAAcABhAHQAaAAu
AACBF1UAUABEAEEAVABFACAAWwBBAHUAZABpAHQAXwBMAG8AZwBzAF0AIABTAEUAVAAgAFsAUwB0
AGEAdAB1AHMAXQAgAD0AIAAyACwAIABbAEUAcgByAG8AcgAgAEQAZQBzAGMAcgBpAHAAdABpAG8A
bgBdAD0AJwBDAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABhACAAcABhAHIAdAAgAG8AZgAg
AHQAaABlACAAcABhAHQAaAAuACcALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEA
VABFACgAKQAsACAAUAByAG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAA9ACcAAX1V
AFAARABBAFQARQAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBdACAAUwBFAFQAIABbAFMAdABhAHQA
dQBzAF0AIAA9ACAALQAxACwAIABbAEUAcgByAG8AcgAgAEQAZQBzAGMAcgBpAHAAdABpAG8AbgBd
ACAAPQAgACcAAV0nACwAIABFAG4AZABfAHQAaQBtAGUAIAA9ACAARwBFAFQARABBAFQARQAoACkA
LAAgAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAEDOwAABXwAfAAA
R1UAUwBQAF8AQwBoAGUAYwBrAEYAaQBsAGUAUwB0AGEAdAB1AHMAQgBlAGYAbwByAGUAUAByAG8A
YwBlAHMAcwBpAG4AZwAAE0AAZgBpAGwAZQBOAGEAbQBlAABxUwBUAF8AMAAzAGIANQBkADYAYQBk
AGUAMQBjAGYANABhADcAYQBiAGEAYgBmADIAMwAxADIAOAAwADgAYQAyAGYAMwBhAC4AUAByAG8A
cABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAADUuZKDdZQfS4o+eRZqyohOAAQgAQEI
AyAAAQUgAQEREQQgAQEOBSABARFpMAcnDg4ODg4ODg4ODg4ODh0OEj0SQQ4IDg4OEUUdDggOEkkO
DggODg4ODg4ODg4STQQAABFFBCABDg4EIAASeQQgABJ9BiABEoCBHAMgABwDIAAOBgACHQ4ODgUg
ABKAiQYgARKAjRwEIAEcHAUAAQ4dDgQgAQIOBSACDg4OBgADDg4ODgUAAgIODgYgAgEOEj0DIAAI
CQABFRKAoQEODgwQAQEeABUSgKEBHgADCgEOBSAAEoCVBSAAEoCpByACEoCtDhwFAAIBDg4EIAAS
QQQAAQgOBAABCAgFAAIODg4IIAMBDhI9EkEHAAQODg4ODgQAAQ4DCAcEHQ4IElEOBiABARGAvQUg
AQEdDgQgAQECAyAAAgQgAB0OBAcBEj0GIAEBEYDFBCABARwJIAISgK0OEYDJBiABEoCtDgYgAQER
gNEIAAESgNkRgN0FIAASgOEHIAIBDhKA4Qi3elxWGTTgiQiJhF3NgIDMkQiwP19/EdUKOgQAAAAA
BAEAAAADBhJhAwYSZQMGEhACBggDBhEUBAABDg4EIAEIDgQAABJhBAAAEmUFAAEBEmUEAAASEAMA
AAEECAASYQQIABJlBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
CAEAAgAAAAAAKAEAI1NUXzAzYjVkNmFkZTFjZjRhN2FiYWJmMjMxMjgwOGEyZjNhAAAFAQAAAAAW
AQARQ29weXJpZ2h0IEAgIDIwMTkAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4U
RnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41tAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAJhdAAAA
AAAAAAAAALJdAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkXQAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAAAAAAAAAa
BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA4jfCIQAA
AQDiN8IhPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBv
AG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAwADMAYgA1AGQANgBh
AGQAZQAxAGMAZgA0AGEANwBhAGIAYQBiAGYAMgAzADEAMgA4ADAAOABhADIAZgAzAGEAAAA+AA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA2ADQAMgAuADEANAAzADAANgAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAxADUANgA5AGEAZgA5ADUA
MQA0AGMAOQA0AGIAOQAwADgAZgBiAGEAOABhADMAMAA3ADkAMQAwADgAMgAyAGUALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADEAOQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADEANQA2ADkA
YQBmADkANQAxADQAYwA5ADQAYgA5ADAAOABmAGIAYQA4AGEAMwAwADcAOQAxADAAOAAyADIAZQAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAwADMAYgA1AGQA
NgBhAGQAZQAxAGMAZgA0AGEANwBhAGIAYQBiAGYAMgAzADEAMgA4ADAAOABhADIAZgAzAGEAAABC
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgANgA0ADIALgAxADQA
MwAwADYAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgANgA0ADIALgAxADQAMwAwADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAxD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\View Creation"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{921DF86B-31CB-4EB6-8393-1780D3A3C45F}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="View Creation"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
              SQLTask:SqlStatementSource="EXECUTE [dbo].[Sp_view] ?&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::Prefix"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{1F2A273C-3B46-4D95-B745-27C94A443D06}"
          DTS:From="Package\Foreach Loop Container\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\View Creation" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{998DABCB-BE27-4CE5-90E9-244DB0A497BA}"
          DTS:ObjectName="{998DABCB-BE27-4CE5-90E9-244DB0A497BA}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::Filename" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{7E93F16B-B4A9-42EA-BE34-5D41B3B9FB36}"
          DTS:ObjectName="{7E93F16B-B4A9-42EA-BE34-5D41B3B9FB36}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::Prefix" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{7E32539C-B24B-4F77-8D25-40DFBBDF3497}"
          DTS:ObjectName="{7E32539C-B24B-4F77-8D25-40DFBBDF3497}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::File_Id" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{F90BE4F3-3D7E-4AFA-B450-B9A83F937944}"
          DTS:ObjectName="{F90BE4F3-3D7E-4AFA-B450-B9A83F937944}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::IsAppend" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{896DFF15-98EC-4635-8F17-303C3A0E73B2}"
          DTS:ObjectName="{896DFF15-98EC-4635-8F17-303C3A0E73B2}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::Table_Already_Exist" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Variables setting"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AAF78D49-1EC8-49FD-9AFC-FE9CC21FA1EB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Variables setting"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
          SQLTask:SqlStatementSource="Select p_SourceFolder as SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder as ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear as [Year]&#xA;from&#xA;(&#xA;select Parameter_Name,Parameter_Value &#xA;from Parameters&#xA;)A&#xA;PIVOT(&#xA;    MAX(Parameter_Value) &#xA;    FOR Parameter_Name IN (&#xA;        p_SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear)&#xA;) AS pivot_table;"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::P_SourceFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="1"
            SQLTask:DtsVariableName="User::P_ArchiveFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="2"
            SQLTask:DtsVariableName="User::CurrentYear" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{A1BE4652-99A7-43C1-99E3-7EF78B023782}"
      DTS:From="Package\Data Flow Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{060D4935-4DBC-456E-B882-2848C270FF7F}"
      DTS:From="Package\Variables setting"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{EF6B2361-BA61-4EBD-99DC-E7D0AEB0BFBF}"
      DTS:From="Package\File Arrived Check"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Variables setting" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="236,41.6"
          Id="Package\Data Flow Task"
          TopLeft="411,186" />
        <NodeLayout
          Size="163.2,41.6"
          Id="Package\File Arrived Check"
          TopLeft="152.1428570942,92.5294117861554" />
        <NodeLayout
          Size="131.2,41.6"
          Id="Package\Foreach Loop Container\Script Task"
          TopLeft="49.5,20.5" />
        <NodeLayout
          Size="144,41.6"
          Id="Package\Foreach Loop Container\View Creation"
          TopLeft="49.5,122.5" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="118.25,62.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="230.4,220"
          Size="230.4,262.4"
          Id="Package\Foreach Loop Container"
          TopLeft="415,290" />
        <NodeLayout
          Size="156.8,41.6"
          Id="Package\Variables setting"
          TopLeft="435,87" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="529.5,228">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,62"
              Start="0,0"
              End="0,54.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,54.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="513.5,129">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.5,57"
              Start="0,0"
              End="15.5,49.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.5"
                    Point2="0,28.5"
                    Point3="4,28.5" />
                  <mssgle:LineSegment
                    End="11.5,28.5" />
                  <mssgle:CubicBezierSegment
                    Point1="11.5,28.5"
                    Point2="15.5,28.5"
                    Point3="15.5,32.5" />
                  <mssgle:LineSegment
                    End="15.5,49.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="315.3428570942,110.564705893078">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="119.6571429058,0"
              Start="0,0"
              End="112.1571429058,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="112.1571429058,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="182,42"
          Id="Package\Data Flow Task\Recordset Destination"
          TopLeft="475,201" />
        <NodeLayout
          Size="150,42"
          Id="Package\Data Flow Task\OLE DB Source"
          TopLeft="486,84" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[OLE DB Source Output]"
          TopLeft="563.5,126">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,75"
              Start="0,0"
              End="0,67.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <DtsEventHandler
    design-time-name="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="151,42"
          Id="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]\Data Flow Task"
          TopLeft="532,111" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>