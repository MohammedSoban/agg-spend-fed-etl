<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/30/2019 2:32:52 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="US-BCKND"
  DTS:CreatorName="QORDATA\syed.najib"
  DTS:DTSID="{628D7E66-B773-44B6-B4B4-630BA1298625}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.0500.272"
  DTS:LocaleID="1033"
  DTS:ObjectName="File Loader csv_OLD"
  DTS:PackageType="5"
  DTS:VersionBuild="528"
  DTS:VersionGUID="{CEEF7E28-24B8-4784-9A59-C3C30C7B6A77}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{2236F1A2-36E3-4D84-8D95-4E0060678947}"
      DTS:ObjectName="DBConn">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DatabaseName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;User ID=fedusr;Initial Catalog=Fed_Rep_Sol;Integrated Security=True;Application Name=SSIS-File Loader-{2236F1A2-36E3-4D84-8D95-4E0060678947}LocalHost.Fed_Rep_Sol;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA2qDUL5TjckWu/RUKI25iTwAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAAB7wdrTQEl4RqFS5xzM2JCB3OxOplwV5/q1MfTDs4VvswAAAAAOgAAAAAIAACAAAADfu1D7j+rT48BZLWmvzMJRpcs+eyLJ/n/uBl93YXhEpBAAAACFrUOBRi+nJ4sW2vEU4JqPQAAAALQtpt7lgjj8EISuL9NbrSWx4xIKLRg/rxBO8ehfArYVCn+OKSay22ek5jlXcDyy5pBr5Xf33nAWR69uI7JJpok</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{925AD8E6-CAE5-4FD2-AFD0-4B065272E802}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentYear">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{259643BE-A0E1-4BED-8464-764861DA7FA1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Filemask">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{732B40E2-3377-47A2-A3BE-189BF0BFA28E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Filename">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{059B4D83-B40E-46D5-838D-232D079C1F9B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="File_Id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{18186B2A-35E4-412B-84A4-62E85F01FB93}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsAppend">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AD143A2-103B-451A-BE1D-3E1BFF8AA6F7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Prefix">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{96706042-42BE-428E-BF48-27333A87828F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{768A2486-28DA-4675-9BF9-183BF26ACFEE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4F7505E4-16FB-4566-88C2-FD03B2DC84B6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Table_Already_Exist">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{1E7DF501-48C4-4C77-9098-D3602F776B7C}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">Declare @Year as varchar(max) = (select parameter_value from Parameters where Parameter_Name = 'p_CurrentYear')

select concat('*',prefix,'*') as filemask , prefix, ID as File_ID, Isappend, ISNULL(b.TABLE_NAME,'Y') as Table_Already_Exist
from file_specs A
left join INFORMATION_SCHEMA.TABLES B
on 'LZ_'+@Year+'_'+PREFIX = b.TABLE_NAME
where Isenable = 1
order by len(Prefix) desc</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="{567F690F-1DCF-4B79-8574-18F7C55EBE58}:external"
                  connectionManagerRefId="Project.ConnectionManagers[LocalHost Fed_Rep_Solution]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      name="filemask"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      name="prefix"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      name="File_ID"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      name="Isappend"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      name="filemask" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="prefix" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      dataType="i4"
                      name="File_ID" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      dataType="i4"
                      name="Isappend" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      name="Table_Already_Exist" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      name="filemask" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      name="prefix" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      name="File_ID" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      name="Isappend" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Recordset Destination"
              componentClassID="Microsoft.RecordsetDestination"
              contactInfo="Recordset Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates and populates an in-memory ADO recordset that is available outside of the data flow. Scripts and other package elements can use the recordset. For example, use a recordset to store the names of files that will be loaded into the data warehouse."
              name="Recordset Destination">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the recordset."
                  name="VariableName">User::Filemask</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
                  hasSideEffects="true"
                  name="Recordset Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[filemask]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="102"
                      cachedName="filemask"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[prefix]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="prefix"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[File_ID]"
                      cachedDataType="i4"
                      cachedName="File_ID"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Isappend]"
                      cachedDataType="i4"
                      cachedName="Isappend"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Table_Already_Exist]"
                      cachedDataType="wstr"
                      cachedLength="128"
                      cachedName="Table_Already_Exist"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
              endId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\File Arrived Check"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{cf397dc2-a021-418a-a269-ca10b7f063a0}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="File Arrived Check"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
          SQLTask:SqlStatementSource="&#xA;update Parameters&#xA;set Parameter_Value = NULL&#xA;where Parameter_Name = 'p_NewFileArrived'" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{B7A2F178-AC9A-461C-A9DD-1D7D9A6243A0}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{1EBD13BE-A768-411D-AE97-D5F83A83F95E}"
        DTS:ObjectName="{1EBD13BE-A768-411D-AE97-D5F83A83F95E}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::Filemask" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:DelayValidation="True"
          DTS:Description="Script Task"
          DTS:DTSID="{6952DD3E-D3BF-4707-BAC8-23ED54616C0C}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{39CE8F14-915B-4B2D-A46D-73F0E3D148F0}"
              DTS:EventID="267090020"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{0F43D157-2278-4D87-9433-84FC9AC81277}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]\Data Flow Task"
                  DTS:CreationName="Microsoft.Pipeline"
                  DTS:Description="Data Flow Task"
                  DTS:DTSID="{ED0A737A-031F-45B6-8480-96D22F9B7FDF}"
                  DTS:ExecutableType="Microsoft.Pipeline"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="Data Flow Task"
                  DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                  <DTS:Variables />
                  <DTS:ObjectData>
                    <pipeline
                      version="1" />
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_1569af9514c94b908fba8a307910822e"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CurrentYear,User::File_Id,User::Filename,User::IsAppend,User::P_ArchiveFolder,User::P_SourceFolder,User::Prefix,User::Table_Already_Exist">
              <ProjectItem
                Name="ST_1569af9514c94b908fba8a307910822e.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6EFB5032-6D43-4CCC-ACD7-42303C154BC6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_03b5d6ade1cf4a7ababf2312808a2f3a</RootNamespace>
    <AssemblyName>ST_1569af9514c94b908fba8a307910822e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.VisualBasic" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Settings.get_Default():ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Sett" +
    "ings")]

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Linq;
#endregion

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string SourceFolderPath = Dts.Variables["User::P_SourceFolder"].Value.ToString();
            string ArchiveFolder = Dts.Variables["User::P_ArchiveFolder"].Value.ToString();
            string FileExtension = ".csv";
            string FileDelimiter = "|";
            string ColumnsDataType = "NVARCHAR(MAX)";
            string File_Id = Dts.Variables["User::File_Id"].Value.ToString();
            string Filename = Dts.Variables["User::Filename"].Value.ToString();
            string Prefix = Dts.Variables["User::Prefix"].Value.ToString();
            string CurrentYear = Dts.Variables["User::CurrentYear"].Value.ToString();
            string IsAppend = Dts.Variables["User::IsAppend"].Value.ToString();
            string Table_Already_Exist = Dts.Variables["User::Table_Already_Exist"].Value.ToString();
            string fullFilename = "";


            string[] fileEntries = Directory.GetFiles(SourceFolderPath, Filename);

            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

         /*   int CheckFileStatusBeforeProcessing(string currentFileName)
            {
               // MessageBox.Show(currentFileName);

                SqlCommand cmd = new SqlCommand("USP_CheckFileStatusBeforeProcessing", myADONETConnection);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@fileName", SqlDbType.NVarChar).Value = currentFileName;
                cmd.Parameters.Add("@status", SqlDbType.Int);
                cmd.Parameters["@status"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                int status = (int)cmd.Parameters["@status"].Value;
               // MessageBox.Show(status.ToString());
                return status;
            }
            */

            /******* NEW COLUMNS INTRODUCED TO INCORPORATE AG-2690 ******/

            string CSVFileColumns = "";
            string SQLColumnsList = "";
            int ValidationFlag = 0;
            string SQLQueryToGetMatchingColumn = "";
            string FullTableName = String.Concat("LZ", "_", CurrentYear, "_", Prefix);

            ////MessageBox.Show("TABLE NAME:" + FullTableName);

            foreach (string fileName in fileEntries)
            {
                System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                if (fileName.Contains(".csv"))
                {

                    try
                    {

                        //Reading file names one by one

                        {
                            // //MessageBox.Show(fileName + ", " + Prefix);

                            //Writing Data of File Into Table
                            fullFilename = fileName;
                            string TableName = "";
                            int counter = 0;
                            string line;
                            string ColumnList = "";
                            string HeadersOfCSV = "";
                            string fd = findDelimiter(fileName);

                            if (fd != "|")
                            {

                                string new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                                if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                {
                                    string logging = "update Audit_Logs set [Error Description]='File delimiter is not |.', Start_time=GETDATE(),Status=-1,file_delimiter='" + fd + "',Processed_TimeStamp='" + datetime + "' where FileName='"+new_name_of_file+"'  and status=5";
                                    // MessageBox.Show(logging);
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    loggingStatement.ExecuteNonQuery();

                                }
                                else
                                {
                                    string logging = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status], File_Delimiter,Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "'File delimiter is not |.', GETDATE()" + ",-1,'" + fd + "','" + datetime + "', GETDATE(), GETDATE())";
                                    // MessageBox.Show(logging);

                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    loggingStatement.ExecuteNonQuery();

                                    string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; // fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                    SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                                    Update_WALStatement.ExecuteNonQuery();

                                }


                            }
                            else
                            {
                                string new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                                if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                {
                                    string logging = "update Audit_Logs set Start_time=GETDATE(),Status=0,file_delimiter='" + fd + "',Processed_TimeStamp='" + datetime + "' where FileName='" + new_name_of_file + "'  and status=5";
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    //MessageBox.Show(logging);
                                    loggingStatement.ExecuteNonQuery();
                                }
                                else
                                {
                                    string logging = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status], File_Delimiter,Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "' ', GETDATE()" + ",0,'" + fd + "','" + datetime + "', GETDATE(), GETDATE())";
                                    SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                    //MessageBox.Show(logging);
                                    loggingStatement.ExecuteNonQuery();

                                    string Update_WAL2 = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; //fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                    SqlCommand Update_WAL2Statement = new SqlCommand(Update_WAL2, myADONETConnection);
                                    Update_WAL2Statement.ExecuteNonQuery();
                                }

                             

                            }

                            //System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                            if (Table_Already_Exist != "Y")
                            {

                                CSVFileColumns = File.ReadLines(fullFilename).First();

                                SQLQueryToGetMatchingColumn = "select STUFF((Select  ','+Column_Name+''  from Information_schema.Columns where Table_Name= '" + FullTableName + "' and COLUMN_NAME NOT IN ('Filename','PK_ID','isDeleted','Delete_Date') order by ORDINAL_POSITION for xml path('')),1,1,'') AS ColumnList";


                                //Get Matching Column List from SQL Server

                                SqlCommand cmd = myADONETConnection.CreateCommand();
                                cmd.CommandText = SQLQueryToGetMatchingColumn;
                                SQLColumnsList = (string)cmd.ExecuteScalar();


                                SQLColumnsList = SQLColumnsList.Replace(",", "|");
                                //MessageBox.Show("YTD CSV Matching Columns: " + CSVFileColumns);
                                //MessageBox.Show("YTD LZ TABLE Matching Columns: " + SQLColumnsList);


                                if (string.Equals(CSVFileColumns, SQLColumnsList))
                                {
                                    ValidationFlag = 1;
                                }
                                else
                                {
                                    ValidationFlag = 0;
                                }

                                if (ValidationFlag == 0)
                                {
                                    string updateQuery_DML = "update Audit_Logs set status = @status, [Error Description] = @errorDescription, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE [ID] = (SELECT MAX([ID]) FROM Audit_Logs WHERE End_time IS NULL AND [FILE_ID] = " + File_Id + ") ";

                                    string errorDescription = "Please upload the file with same format as of previous files";
                                    SqlCommand updateQuery_DML_CMD = new SqlCommand(updateQuery_DML, myADONETConnection);
                                    updateQuery_DML_CMD.Parameters.AddWithValue("@status", "-1".ToString());
                                    updateQuery_DML_CMD.Parameters.AddWithValue("@errorDescription", errorDescription);

                                    //MessageBox.Show(updateQuery_DML);

                                    updateQuery_DML_CMD.ExecuteNonQuery();

                                    // MOVING THE FILE TO 'FAILED_FILES' FOLDER'
                                    SourceFile.Close();

                                    File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + fileName.Replace(SourceFolderPath, "").Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);

                                    // SKIP THIS ITERATION OF FILE
                                    continue;

                                }
                            }
                            while ((line = SourceFile.ReadLine()) != null & fd == "|")
                            {

                                if (counter == 0)
                                {
                                    HeadersOfCSV = "[" + line.Replace(FileDelimiter, "],[") + "]";
                                    HeadersOfCSV = HeadersOfCSV + ",[Filename]";


                                }

                                ColumnList = "[" + line.Replace(FileDelimiter, "],[") + "]";
                                TableName = Prefix; // (((fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "")).Replace("\\", ""));

                                if (Convert.ToInt32(IsAppend) == Convert.ToInt32(0))
                                {




                                    if (counter == 0 && ValidationFlag == 0)
                                    {
                                        string DropTableStatement = "IF EXISTS (SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U') DROP TABLE [LZ_" + CurrentYear + "_" + TableName + "];";
                                        SqlCommand DropStatement = new SqlCommand(DropTableStatement, myADONETConnection);
                                        DropStatement.ExecuteNonQuery();


                                        string CreateTableStatement = " Create Table LZ_" + CurrentYear + "_" + TableName;
                                        CreateTableStatement += "([" + line.Replace(FileDelimiter, "] " + ColumnsDataType + ",[") + "] " + ColumnsDataType + ",Filename nvarchar(max))";
                                        ////MessageBox.Show(CreateTableStatement);
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, myADONETConnection);
                                        CreateTableCmd.ExecuteNonQuery();

                                        string logging_1 = "UPDATE [Audit_Logs] SET [Status] = 1, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ")  ";
                                        ////MessageBox.Show(logging_1);
                                        SqlCommand logging_1Statement = new SqlCommand(logging_1, myADONETConnection);
                                        logging_1Statement.ExecuteNonQuery();

                                        string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection);
                                        AltertableStatement.ExecuteNonQuery();

                                        string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection);
                                        isDeleteColumnStatement.ExecuteNonQuery();

                                        string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection);
                                        deleteDateColumnStatement.ExecuteNonQuery();


                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                        FileArrivedtatement.ExecuteNonQuery();


                                    }
                                    else
                                    {
                                        //  string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]";// (" + ColumnList + ") ";
                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " (" + HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "' )";
                                        // //MessageBox.Show(query.ToString());
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection);
                                        myCommand1.ExecuteNonQuery();

                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ")  ";
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                        FileArrivedtatement.ExecuteNonQuery();


                                    }
                                }
                                else
                                {

                                    if ((counter != 0) && (Table_Already_Exist != Convert.ToString('Y')))
                                    {
                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " ("+ HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "')";
                                        ////MessageBox.Show(fd + ',' + counter + ',' + Table_Already_Exist);
                                        ////MessageBox.Show(query.ToString());
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection);
                                        myCommand1.ExecuteNonQuery();

                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ")  ";
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                        FileArrivedtatement.ExecuteNonQuery();

                                    }
                                    else if ((counter == 0) && (Table_Already_Exist == Convert.ToString('Y')))
                                    {

                                        string DropTableStatement = "IF EXISTS (SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U') DROP TABLE [LZ_" + CurrentYear + "_" + TableName + "];";
                                        SqlCommand DropStatement = new SqlCommand(DropTableStatement, myADONETConnection);
                                        DropStatement.ExecuteNonQuery();

                                        string CreateTableStatement = " Create Table LZ_" + CurrentYear + "_" + TableName;
                                        CreateTableStatement += "([" + line.Replace(FileDelimiter, "] " + ColumnsDataType + ",[") + "] " + ColumnsDataType + ",Filename nvarchar(max))";
                                        ////MessageBox.Show(CreateTableStatement);
                                        SqlCommand CreateTableCmd = new SqlCommand(CreateTableStatement, myADONETConnection);
                                        CreateTableCmd.ExecuteNonQuery();

                                        string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                        SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection);
                                        AltertableStatement.ExecuteNonQuery();

                                        string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection);
                                        isDeleteColumnStatement.ExecuteNonQuery();

                                        string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                        ////MessageBox.Show(Altertable);
                                        SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection);
                                        deleteDateColumnStatement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                        FileArrivedtatement.ExecuteNonQuery();



                                    }
                                    else if ((counter != 0) && (Table_Already_Exist == Convert.ToString('Y')))
                                    {
                                        // string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]";// (" + ColumnList + ") ";
                                        string query = "Insert into [LZ_" + CurrentYear + "_" + TableName + "]" + " (" + HeadersOfCSV + ")";
                                        query += "VALUES('" + line.Replace("'", "''").Replace(FileDelimiter, "','") + "', '" + fullFilename.Replace(SourceFolderPath, "").Replace("\\", "") + "')";
                                        ////MessageBox.Show(query.ToString());
                                        SqlCommand myCommand1 = new SqlCommand(query, myADONETConnection);
                                        myCommand1.ExecuteNonQuery();


                                        string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ") ";
                                        SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                        logging_2Statement.ExecuteNonQuery();

                                        string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                        FileArrivedtatement.ExecuteNonQuery();

                                    }


                                }

                                counter++;

                            }


                            //Moving processed files to archive
                            if (fd == "|")
                            {
                                SourceFile.Close();
                                //   //MessageBox.Show(ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                                File.Move(fileName, ArchiveFolder +"\\"  + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);
                                // File.Move(fileName, ArchiveFolder + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                            }

                            if (fd != "|")
                            {

                                SourceFile.Close();
                                File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") +"\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);
                              
                                // File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                            }

                            string logging_3 = "UPDATE [Audit_Logs] SET [Status] = 4, End_time = GETDATE() ,Processed_TimeStamp='" + datetime + "' WHERE File_Delimiter = '|' and ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ") ";
                            SqlCommand logging_3Statement = new SqlCommand(logging_3, myADONETConnection);
                            logging_3Statement.ExecuteNonQuery();

                            string FileArrived_Final = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                            SqlCommand FileArrivedtatement_Final = new SqlCommand(FileArrived_Final, myADONETConnection);
                            FileArrivedtatement_Final.ExecuteNonQuery();


                            Dts.TaskResult = (int)ScriptResults.Success;
                        }
                    }


                    catch (Exception e)
                    {
                      //  MessageBox.Show(e.Message);
                        //  //MessageBox.Show(fileName);
                        // System.IO.StreamReader SourceFile = new System.IO.StreamReader(fileName);

                        // Create Logs for Errors

                        /*SqlConnection myADONETConnection = new SqlConnection();
                        myADONETConnection = (SqlConnection)
                        (Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);*/
           

                        string new_name_of_file = CurrentYear + '_' + fileName.Replace(SourceFolderPath, "").Replace("\\", "");

                        if (e.Message.ToString() == "Could not find a part of the path.")
                        {
                            string logging_4 = "UPDATE [Audit_Logs] SET [Status] = 2, [Error Description]='Could not find a part of the path.', End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ") ";
                            ////MessageBox.Show("Exception query: " + logging_4.ToString());
                            SqlCommand myCommand1 = new SqlCommand(logging_4, myADONETConnection);
                            myCommand1.ExecuteNonQuery();
                        }
                        else
                        {
                            string logging_4 = "UPDATE [Audit_Logs] SET [Status] = -1, [Error Description] = '" + e.Message.Replace("'", "") + "', End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + ")";
                            ////MessageBox.Show("Exception query: " + logging_4.ToString());
                            SqlCommand myCommand1 = new SqlCommand(logging_4, myADONETConnection);
                            myCommand1.ExecuteNonQuery();


                            string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; // fileName.Replace(SourceFolderPath, "").Replace("\\", "") + "'"; 
                            SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                            Update_WALStatement.ExecuteNonQuery();


                        }

                        // //MessageBox.Show(fileName);
                        // //MessageBox.Show(ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);


                        SourceFile.Close();
                        //File.Move(fileName, ArchiveFolder + "\\" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "") + "_" + datetime + FileExtension);
                        //SourceFile.Close();
                        //MessageBox.Show(ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);
                       File.Move(fileName, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (fileName.Replace(SourceFolderPath, "")).Replace(FileExtension, "").Replace("\\", "") + "_" + datetime + FileExtension);

                    }
                    Dts.TaskResult = (int)ScriptResults.Success;
                }
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion// Checking File Delimiter}

        public static string findDelimiter(string strFilename)
        {
            // define delimiters of interest
            string[] delimiters = new string[] { ";", "|", ",", "||", "'" };

            // test file against delimiters
            for (int delcnt = 0; delcnt < delimiters.Length; delcnt++)
            {
                using (Microsoft.VisualBasic.FileIO.TextFieldParser parser = new Microsoft.VisualBasic.FileIO.TextFieldParser(strFilename))
                {
                    // setup parser
                    parser.TextFieldType = Microsoft.VisualBasic.FileIO.FieldType.Delimited;
                    parser.SetDelimiters(delimiters[delcnt]);
                    parser.HasFieldsEnclosedInQuotes = true;

                    if (!parser.EndOfData)
                    {
                        // parse
                        string[] fields = parser.ReadFields();
                        // if we get more than one field, we have found the correct delimiter
                        if (fields.Length > 1)
                            return delimiters[delcnt];
                    }
                }
            } // end_of_for (int delcnt = 0; delcnt < delimiters.Length; delcnt++)
            return null;
        }

             public int CheckFileStatusBeforeProcessing(string currentFileName)
            {
            // MessageBox.Show(currentFileName);
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

            SqlCommand cmd = new SqlCommand("USP_CheckFileStatusBeforeProcessing", myADONETConnection);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@fileName", SqlDbType.NVarChar).Value = currentFileName;
                cmd.Parameters.Add("@status", SqlDbType.Int);
                cmd.Parameters["@status"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                int status = (int)cmd.Parameters["@status"].Value;
               // MessageBox.Show(status.ToString());
                return status;
            }

    }
}
 ]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_1569af9514c94b908fba8a307910822e</msb:CodeName>
		<msb:DisplayName>ST_1569af9514c94b908fba8a307910822e</msb:DisplayName>
		<msb:ProjectId>{206E34C1-EE68-4FA9-BF68-5D8D0BBD6C4D}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_1569af9514c94b908fba8a307910822e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_03b5d6ade1cf4a7ababf2312808a2f3a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_03b5d6ade1cf4a7ababf2312808a2f3a")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_03b5d6ade1cf4a7ababf2312808a2f3a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_1569af9514c94b908fba8a307910822e.dll">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
GgCKBsMBBgCMBFQFDgACAXwIDgDqACUGBgCZASAABgABALUAHgBeAUQGDgDDBXwIDgC4BnwIBgBr
BiAABgCSCFQFEgD+ASoABgBpAVQFDgAMApIADgDsAZIADgCsBiUGDgAIBpIABgARAFQFBgATAlQF
BgB1AVQFBgC8CLEFAAAAABcAAAAAAAEAAQABABAAbAVuADkAAQABAAAAEAAlB4EHWQABAAUAAAEQ
AO8HgQdtAAMACQADAQAARQgAAFEABAAMABEAYAWKAREARAKOAREAOQGSAQYGZgCWAVaANQiZAVaA
JAKZAVAgAAAAAIYAcgUGAAEA/C8AAAAAlgDFBp0BAQCoMAAAAACGAJMEogECAF0xAAAAAIYY0wYG
AAMAZTEAAAAAgxjTBgYAAwBtMQAAAACTCHYGpwEDAJkxAAAAAJMILAKsAQMAoDEAAAAAkwg4ArEB
AwCoMQAAAACWCGEItwEEAK8xAAAAAIYY0wYGAAQAtzEAAAAAkRjZBrwBBAAAAAEArgEAAAEAngEA
AAEAZQQJANMGAQARANMGBgAZANMGCgApANMGEAAxANMGEAA5ANMGEABBANMGEABJANMGEABRANMG
EABZANMGEABhANMGEABpANMGBgCpANMGBgDRANMGFQDhANMGBgCBALAISwCBAIoEUABxAD0IVQDp
ALAHWgDxAEsFXwD5AEQEZQCxAIoEaQABAb4HbQB5ANMGBgDpAAgIdAAJAUsFegDpAKEFZQARAdoF
gQAZAVMIhgCJANMGEAAZAf8HjAAZAesIkQAZATEBlwAZAVMInQAhAdMGpAApAcUIqwAxAccHrwBB
AZoIuQB5APQAygApAaAIEAApAVAGZQAZAfgHkQAhARgI0ABJAVgE1gBZAYgCBgAxAWsE3gAZAVMI
5ABhAQ8A6gBhAQ8A7wAZAVMI9ABhAYoE/AAZAd8IkQBZAeMBaQDpAG0IAQCRAEkBaQCZANMGEACZ
APYBCgGZACcIEQGZANEHFwGZAJ4AHAGZAPMGIAFxAY4CBgApAQgCKgGJAU4EMQFJAeYANgFJAUsF
QAGJAfoFRwGJAUQEZQBxANMGBgCxANMGBgChAYcBTgGhAbgIVwG5ANMGXQHZANMGBgAIABQAgAEI
ABgAhQEpAHMA9wEuAAsAzwEuABMA2AEuABsA9wEuACMAAAIuACsAKQIuADMAKQIuADsAKQIuAEMA
AAIuAEsALwIuAFMAKQIuAFsARgJDAGMAhQFJAHMA9wFhAHsAhQFjAGsAhQEbAAEBJQEDAAEABAAD
AAAAegbAAQAATALFAQAAZQjKAQIABgADAAIABwAFAAEACAAFAAIACQAHAASAAAABAAAAvCFCoQAA
AAAAAA0BAAAEAAAAAAAAAAAAAABlAawAAAAAAA4AAAAAAAAAAAAAAG4BswQAAAAABAAAAAAAAAAA
AAAAZQGSAAAAAAAKAAAAAAAAAAAAAAB3AdAAAAAAAAQAAAAAAAAAAAAAAGUBVAUAAAAADgAAAAAA
AAAAAAAAbgFHAAAAAAAEAAAAAAAAAAAAAABlARgCAAAAAAAAAAABAAAALwcAAAUAAgBNAMYAAAAA
SUVudW1lcmFibGVgMQBUb0ludDMyADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuVmlzdWFs
QmFzaWMuRmlsZUlPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFNUXzAz
YjVkNmFkZTFjZjRhN2FiYWJmMjMxMjgwOGEyZjNhAFN5c3RlbS5EYXRhAGdldF9FbmRPZkRhdGEA
bXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMATWljcm9zb2Z0LlZpc3VhbEJhc2lj
AEFkZABEYkNvbW1hbmQAQ3JlYXRlQ29tbWFuZABTcWxDb21tYW5kAFNUXzE1NjlhZjk1MTRjOTRi
OTA4ZmJhOGEzMDc5MTA4MjJlAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAFZh
cmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZy
b21IYW5kbGUARmlsZQBjdXJyZW50RmlsZU5hbWUAc3RyRmlsZW5hbWUARGF0ZVRpbWUATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBSZWFkTGluZQBTcWxEYlR5cGUAc2V0X1RleHRGaWVs
ZFR5cGUAc2V0X0NvbW1hbmRUeXBlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0
X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBs
aWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRy
aWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAEFkZFdpdGhWYWx1ZQB2YWx1ZQBNb3ZlAFN5c3Rl
bS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAQ2hlY2tGaWxlU3RhdHVzQmVmb3JlUHJvY2Vz
c2luZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9k
ZWwAU1RfMTU2OWFmOTUxNGM5NGI5MDhmYmE4YTMwNzkxMDgyMmUuZGxsAGdldF9JdGVtAFN5c3Rl
bQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVt
Lkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFt
ZXRlckNvbGxlY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBzZXRfRGlyZWN0
aW9uAFBhcmFtZXRlckRpcmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1
cmVJbmZvAFN5c3RlbS5MaW5xAEV4ZWN1dGVTY2FsYXIAU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIA
Z2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBUZXh0RmllbGRQYXJzZXIARGJQ
YXJhbWV0ZXIAU3FsUGFyYW1ldGVyAGZpbmREZWxpbWl0ZXIALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBSZWFkRmllbGRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTVF8wM2I1ZDZhZGUxY2Y0YTdhYmFiZjIzMTI4MDhhMmYzYS5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfMDNiNWQ2YWRlMWNmNGE3
YWJhYmYyMzEyODA4YTJmM2EuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFJlYWRM
aW5lcwBzZXRfSGFzRmllbGRzRW5jbG9zZWRJblF1b3RlcwBTZXR0aW5ncwBFcXVhbHMAQ29udGFp
bnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFNldERlbGltaXRlcnMAU3VjY2VzcwBn
ZXRfRHRzAFNjcmlwdFJlc3VsdHMAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jl
c3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAQ29udmVydABGaXJzdABzZXRfQ29tbWFuZFRleHQA
Z2V0X05vdwBnZXRfQXNzZW1ibHkARXhlY3V0ZU5vblF1ZXJ5AERpcmVjdG9yeQBvcF9FcXVhbGl0
eQBvcF9JbmVxdWFsaXR5AAAAAAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAApVQBzAGUA
cgA6ADoAUABfAFMAbwB1AHIAYwBlAEYAbwBsAGQAZQByAAArVQBzAGUAcgA6ADoAUABfAEEAcgBj
AGgAaQB2AGUARgBvAGwAZABlAHIAAAkuAGMAcwB2AAADfAAAG04AVgBBAFIAQwBIAEEAUgAoAE0A
QQBYACkAABtVAHMAZQByADoAOgBGAGkAbABlAF8ASQBkAAAdVQBzAGUAcgA6ADoARgBpAGwAZQBu
AGEAbQBlAAAZVQBzAGUAcgA6ADoAUAByAGUAZgBpAHgAACNVAHMAZQByADoAOgBDAHUAcgByAGUA
bgB0AFkAZQBhAHIAAB1VAHMAZQByADoAOgBJAHMAQQBwAHAAZQBuAGQAADNVAHMAZQByADoAOgBU
AGEAYgBsAGUAXwBBAGwAcgBlAGEAZAB5AF8ARQB4AGkAcwB0AAABAA1EAEIAQwBvAG4AbgAABUwA
WgAAA18AAANcAACA63UAcABkAGEAdABlACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAHMAZQB0ACAA
WwBFAHIAcgBvAHIAIABEAGUAcwBjAHIAaQBwAHQAaQBvAG4AXQA9ACcARgBpAGwAZQAgAGQAZQBs
AGkAbQBpAHQAZQByACAAaQBzACAAbgBvAHQAIAB8AC4AJwAsACAAUwB0AGEAcgB0AF8AdABpAG0A
ZQA9AEcARQBUAEQAQQBUAEUAKAApACwAUwB0AGEAdAB1AHMAPQAtADEALABmAGkAbABlAF8AZABl
AGwAaQBtAGkAdABlAHIAPQAnAAEvJwAsAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQA
YQBtAHAAPQAnAAElJwAgAHcAaABlAHIAZQAgAEYAaQBsAGUATgBhAG0AZQA9ACcAAR8nACAAIABh
AG4AZAAgAHMAdABhAHQAdQBzAD0ANQABgTtJAE4AUwBFAFIAVAAgAEkATgBUAE8AIABbAEEAdQBk
AGkAdABfAEwAbwBnAHMAXQAgACgAWwBGAEkATABFAF8ASQBEAF0ALABbAEYAaQBsAGUATgBhAG0A
ZQBdACwAWwBFAHIAcgBvAHIAIABEAGUAcwBjAHIAaQBwAHQAaQBvAG4AXQAsAFMAdABhAHIAdABf
AHQAaQBtAGUALABbAFMAdABhAHQAdQBzAF0ALAAgAEYAaQBsAGUAXwBEAGUAbABpAG0AaQB0AGUA
cgAsAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAALABJAG4AcwBlAHIAdABf
AEQAYQB0AGUALABVAHAAZABhAHQAZQBkAF8ARABhAHQAZQApACAAVgBBAEwAVQBFAFMAIAAoAAAF
LAAnAAFZJwAsACcARgBpAGwAZQAgAGQAZQBsAGkAbQBpAHQAZQByACAAaQBzACAAbgBvAHQAIAB8
AC4AJwAsACAARwBFAFQARABBAFQARQAoACkALAAtADEALAAnAAEHJwAsACcAATEnACwAIABHAEUA
VABEAEEAVABFACgAKQAsACAARwBFAFQARABBAFQARQAoACkAKQABgY11AHAAZABhAHQAZQAgAEEA
IABzAGUAdAAgAHMAdABhAHQAdQBzACAAPQAgADMAIABmAHIAbwBtACAAVwBlAGIAQQB0AHQAYQBj
AGgAbQBlAG4AdABMAG8AZwBzACAAQQAgAGkAbgBuAGUAcgAgAGoAbwBpAG4AIAAoAHMAZQBsAGUA
YwB0ACAARgBpAGwAZQBOAGEAbQBlACwAIABtAGEAeAAoAGkAZAApACAAYQBzACAAaQBkACAAZgBy
AG8AbQAgAFcAZQBiAEEAdAB0AGEAYwBoAG0AZQBuAHQATABvAGcAcwAgAGcAcgBvAHUAcAAgAGIA
eQAgAEYAaQBsAGUATgBhAG0AZQApAEIAIABvAG4AIABhAC4ARgBpAGwAZQBOAGEAbQBlACAAPQAg
AGIALgBGAGkAbABlAE4AYQBtAGUAIABhAG4AZAAgAGEALgBJAGQAIAA9ACAAYgAuAGkAZAAgAHcA
aABlAHIAZQAgAGEALgBGAGkAbABlAE4AYQBtAGUAIAA9ACAAJwABAycAAYCJdQBwAGQAYQB0AGUA
IABBAHUAZABpAHQAXwBMAG8AZwBzACAAcwBlAHQAIABTAHQAYQByAHQAXwB0AGkAbQBlAD0ARwBF
AFQARABBAFQARQAoACkALABTAHQAYQB0AHUAcwA9ADAALABmAGkAbABlAF8AZABlAGwAaQBtAGkA
dABlAHIAPQAnAAEpJwAsACcAIAAnACwAIABHAEUAVABEAEEAVABFACgAKQAsADAALAAnAAEDWQAA
gLtzAGUAbABlAGMAdAAgAFMAVABVAEYARgAoACgAUwBlAGwAZQBjAHQAIAAgACcALAAnACsAQwBv
AGwAdQBtAG4AXwBOAGEAbQBlACsAJwAnACAAIABmAHIAbwBtACAASQBuAGYAbwByAG0AYQB0AGkA
bwBuAF8AcwBjAGgAZQBtAGEALgBDAG8AbAB1AG0AbgBzACAAdwBoAGUAcgBlACAAVABhAGIAbABl
AF8ATgBhAG0AZQA9ACAAJwABgRMnACAAYQBuAGQAIABDAE8ATABVAE0ATgBfAE4AQQBNAEUAIABO
AE8AVAAgAEkATgAgACgAJwBGAGkAbABlAG4AYQBtAGUAJwAsACcAUABLAF8ASQBEACcALAAnAGkA
cwBEAGUAbABlAHQAZQBkACcALAAnAEQAZQBsAGUAdABlAF8ARABhAHQAZQAnACkAIABvAHIAZABl
AHIAIABiAHkAIABPAFIARABJAE4AQQBMAF8AUABPAFMASQBUAEkATwBOACAAZgBvAHIAIAB4AG0A
bAAgAHAAYQB0AGgAKAAnACcAKQApACwAMQAsADEALAAnACcAKQAgAEEAUwAgAEMAbwBsAHUAbQBu
AEwAaQBzAHQAAQMsAACA/XUAcABkAGEAdABlACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAHMAZQB0
ACAAcwB0AGEAdAB1AHMAIAA9ACAAQABzAHQAYQB0AHUAcwAsACAAWwBFAHIAcgBvAHIAIABEAGUA
cwBjAHIAaQBwAHQAaQBvAG4AXQAgAD0AIABAAGUAcgByAG8AcgBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4ALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEAVABFACgAKQAsACAAUAByAG8A
YwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAgAD0AIAAnAAGAsScAIABXAEgARQBSAEUA
IABbAEkARABdACAAPQAgACgAUwBFAEwARQBDAFQAIABNAEEAWAAoAFsASQBEAF0AKQAgAEYAUgBP
AE0AIABBAHUAZABpAHQAXwBMAG8AZwBzACAAVwBIAEUAUgBFACAARQBuAGQAXwB0AGkAbQBlACAA
SQBTACAATgBVAEwATAAgAEEATgBEACAAWwBGAEkATABFAF8ASQBEAF0AIAA9ACAAAQUpACAAAHlQ
AGwAZQBhAHMAZQAgAHUAcABsAG8AYQBkACAAdABoAGUAIABmAGkAbABlACAAdwBpAHQAaAAgAHMA
YQBtAGUAIABmAG8AcgBtAGEAdAAgAGEAcwAgAG8AZgAgAHAAcgBlAHYAaQBvAHUAcwAgAGYAaQBs
AGUAcwAAD0AAcwB0AGEAdAB1AHMAAAUtADEAASNAAGUAcgByAG8AcgBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AAA9BAHIAYwBoAGkAdgBlAAAZRgBhAGkAbABlAGQAXwBGAGkAbABlAHMAAANbAAAHXQAs
AFsAAANdAAAXLABbAEYAaQBsAGUAbgBhAG0AZQBdAABtSQBGACAARQBYAEkAUwBUAFMAIAAoAFMA
RQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABzAHkAcwAuAG8AYgBqAGUAYwB0AHMAIABXAEgARQBS
AEUAIABuAGEAbQBlACAAPQAgACcATABaAF8AAUMnACAAQQBOAEQAIAB0AHkAcABlACAAPQAgACcA
VQAnACkAIABEAFIATwBQACAAVABBAEIATABFACAAWwBMAFoAXwABBV0AOwAAIyAAQwByAGUAYQB0
AGUAIABUAGEAYgBsAGUAIABMAFoAXwAABSgAWwAABV0AIAAABSwAWwAAMSwARgBpAGwAZQBuAGEA
bQBlACAAbgB2AGEAcgBjAGgAYQByACgAbQBhAHgAKQApAACAo1UAUABEAEEAVABFACAAWwBBAHUA
ZABpAHQAXwBMAG8AZwBzAF0AIABTAEUAVAAgAFsAUwB0AGEAdAB1AHMAXQAgAD0AIAAxACwAIABF
AG4AZABfAHQAaQBtAGUAIAA9ACAARwBFAFQARABBAFQARQAoACkALAAgAFAAcgBvAGMAZQBzAHMA
ZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAF/JwAgAFcASABFAFIARQAgAEkARAAgAD0AIAAo
AFMARQBMAEUAQwBUACAATQBBAFgAKABJAEQAKQAgAEYAUgBPAE0AIABBAHUAZABpAHQAXwBMAG8A
ZwBzACAAVwBIAEUAUgBFACAAWwBGAEkATABFAF8ASQBEAF0AIAA9ACAAAQcpACAAIAAAIUEATABU
AEUAUgAgAFQAQQBCAEwARQAgAFsATABaAF8AADtdACAAYQBkAGQAIABQAEsAXwBJAEQAIABJAE4A
VAAgAEkARABFAE4AVABJAFQAWQAoADEALAAxACkAAE9dACAAYQBkAGQAIABpAHMARABlAGwAZQB0
AGUAZAAgAEkATgBUACAATgBPAFQAIABOAFUATABMACAAZABlAGYAYQB1AGwAdAAgACAAMAAAgItd
ACAAYQBkAGQAIABEAGUAbABlAHQAZQBfAEQAYQB0AGUAIABkAGEAdABlAHQAaQBtAGUAIABuAG8A
dAAgAG4AdQBsAGwAIABkAGUAZgBhAHUAbAB0ACAAJwAxADgAMAAwAC0AMAA3AC0AMQA2ACAAMAAw
ADoAMAAwADoAMAAwAC4AMAAwADAAJwABgKt1AHAAZABhAHQAZQAgAFAAYQByAGEAbQBlAHQAZQBy
AHMAIABzAGUAdAAgAFAAYQByAGEAbQBlAHQAZQByAF8AVgBhAGwAdQBlACAAPQAgACcAMQAnACAA
dwBoAGUAcgBlACAAUABhAHIAYQBtAGUAdABlAHIAXwBOAGEAbQBlACAAPQAgACcAcABfAE4AZQB3
AEYAaQBsAGUAQQByAHIAaQB2AGUAZAAnAAEhSQBuAHMAZQByAHQAIABpAG4AdABvACAAWwBMAFoA
XwAAB10AIAAoAAADKQAAEVYAQQBMAFUARQBTACgAJwABBScAJwABCScALAAgACcAAQcnACAAKQAB
gKNVAFAARABBAFQARQAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBdACAAUwBFAFQAIABbAFMAdABh
AHQAdQBzAF0AIAA9ACAAMgAsACAARQBuAGQAXwB0AGkAbQBlACAAPQAgAEcARQBUAEQAQQBUAEUA
KAApACwAIABQAHIAbwBjAGUAcwBzAGUAZABfAFQAaQBtAGUAUwB0AGEAbQBwAD0AJwABBScAKQAB
gKNVAFAARABBAFQARQAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBdACAAUwBFAFQAIABbAFMAdABh
AHQAdQBzAF0AIAA9ACAANAAsACAARQBuAGQAXwB0AGkAbQBlACAAPQAgAEcARQBUAEQAQQBUAEUA
KAApACAALABQAHIAbwBjAGUAcwBzAGUAZABfAFQAaQBtAGUAUwB0AGEAbQBwAD0AJwABgLEnACAA
VwBIAEUAUgBFACAARgBpAGwAZQBfAEQAZQBsAGkAbQBpAHQAZQByACAAPQAgACcAfAAnACAAYQBu
AGQAIABJAEQAIAA9ACAAKABTAEUATABFAEMAVAAgAE0AQQBYACgASQBEACkAIABGAFIATwBNACAA
QQB1AGQAaQB0AF8ATABvAGcAcwAgAFcASABFAFIARQAgAFsARgBJAEwARQBfAEkARABdACAAPQAg
AAFFQwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAYQAgAHAAYQByAHQAIABvAGYAIAB0AGgA
ZQAgAHAAYQB0AGgALgAAgRdVAFAARABBAFQARQAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBdACAA
UwBFAFQAIABbAFMAdABhAHQAdQBzAF0AIAA9ACAAMgAsACAAWwBFAHIAcgBvAHIAIABEAGUAcwBj
AHIAaQBwAHQAaQBvAG4AXQA9ACcAQwBvAHUAbABkACAAbgBvAHQAIABmAGkAbgBkACAAYQAgAHAA
YQByAHQAIABvAGYAIAB0AGgAZQAgAHAAYQB0AGgALgAnACwAIABFAG4AZABfAHQAaQBtAGUAIAA9
ACAARwBFAFQARABBAFQARQAoACkALAAgAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBTAHQA
YQBtAHAAPQAnAAF9VQBQAEQAQQBUAEUAIABbAEEAdQBkAGkAdABfAEwAbwBnAHMAXQAgAFMARQBU
ACAAWwBTAHQAYQB0AHUAcwBdACAAPQAgAC0AMQAsACAAWwBFAHIAcgBvAHIAIABEAGUAcwBjAHIA
aQBwAHQAaQBvAG4AXQAgAD0AIAAnAAFdJwAsACAARQBuAGQAXwB0AGkAbQBlACAAPQAgAEcARQBU
AEQAQQBUAEUAKAApACwAIABQAHIAbwBjAGUAcwBzAGUAZABfAFQAaQBtAGUAUwB0AGEAbQBwAD0A
JwABAzsAAAV8AHwAAEdVAFMAUABfAEMAaABlAGMAawBGAGkAbABlAFMAdABhAHQAdQBzAEIAZQBm
AG8AcgBlAFAAcgBvAGMAZQBzAHMAaQBuAGcAABNAAGYAaQBsAGUATgBhAG0AZQAAcVMAVABfADAA
MwBiADUAZAA2AGEAZABlADEAYwBmADQAYQA3AGEAYgBhAGIAZgAyADMAMQAyADgAMAA4AGEAMgBm
ADMAYQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAANdC6X4GGrkSu
QdJhll1YgAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERZS8HJw4ODg4ODg4ODg4ODg4dDhI9DggO
DhFBHQ4IDhJFDggODg4ODg4ODg4ODhJJDgQAABFBBCABDg4EIAASdQQgABJ5BSABEn0cAyAAHAMg
AA4GAAIdDg4OBSAAEoCFBiABEoCJHAQgARwcBQABDh0OBCABAg4FAAICDg4FIAIODg4GAAMODg4O
BiACAQ4SPQMgAAgJAAEVEoCdAQ4ODBABAR4AFRKAnQEeAAMKAQ4FIAASgJEFIAASgKUHIAISgKkO
HAUAAgEODgUAAg4ODgQAAQgOBAABCAgHAAQODg4ODgQAAQ4DCAcEHQ4IEk0OBiABARGAtQUgAQEd
DgQgAQECAyAAAgQgAB0OBAcBEj0GIAEBEYC9BCABARwJIAISgKkOEYDBBiABEoCpDgYgAQERgMkI
AAESgNERgNUFIAASgNkHIAIBDhKA2Qi3elxWGTTgiQiJhF3NgIDMkQiwP19/EdUKOgQAAAAABAEA
AAADBhJdAwYSYQMGEhACBggDBhEUBAABDg4EIAEIDgQAABJdBAAAEmEFAAEBEmEEAAASEAMAAAEE
CAASXQQIABJhBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NUXzAzYjVkNmFkZTFjZjRhN2FiYWJmMjMxMjgwOGEyZjNhAAAFAQAAAAAWAQAR
Q29weXJpZ2h0IEAgIDIwMTkAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41tAAAAM7K774BAAAAkQAAAGxTeXN0
ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJl
c291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAMxZAAAAAAAA
AAAAAOZZAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYWQAAAAAAAAAAAAAAAF9Db3JEbGxNYWlu
AG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAA
AAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoEAAAAAAAAAAAA
ABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQBCobwh
AAABAEKhvCE/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJ
AG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQA
cgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBD
AG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAA
cAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAAMwBiADUAZAA2
AGEAZABlADEAYwBmADQAYQA3AGEAYgBhAGIAZgAyADMAMQAyADgAMAA4AGEAMgBmADMAYQAAAD4A
DwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADYAMwA2AC4ANAAxADIAOAAy
AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADEANQA2ADkAYQBmADkA
NQAxADQAYwA5ADQAYgA5ADAAOABmAGIAYQA4AGEAMwAwADcAOQAxADAAOAAyADIAZQAuAGQAbABs
AAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQA
IABAACAAIAAyADAAMQA5AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAA
AAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AMQA1ADYA
OQBhAGYAOQA1ADEANABjADkANABiADkAMAA4AGYAYgBhADgAYQAzADAANwA5ADEAMAA4ADIAMgBl
AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADAAMwBiADUA
ZAA2AGEAZABlADEAYwBmADQAYQA3AGEAYgBhAGIAZgAyADMAMQAyADgAMAA4AGEAMgBmADMAYQAA
AEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA2ADMANgAuADQA
MQAyADgAMgAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4AOAA2ADMANgAuADQAMQAyADgAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAAD4OQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\View Creation"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{372ad73c-6d66-4c30-b184-c8a8031b351f}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="View Creation"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
              SQLTask:SqlStatementSource="EXECUTE [dbo].[Sp_view] ?&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::Prefix"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{936C1850-107D-4D9F-92FC-F4EB2C8CBF73}"
          DTS:From="Package\Foreach Loop Container\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\View Creation" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{6CFD286D-B99E-4B96-A493-F85683EBDBF0}"
          DTS:ObjectName="{6CFD286D-B99E-4B96-A493-F85683EBDBF0}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::Filename" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{7A55E80E-688D-4D50-9B69-ED6661B760E3}"
          DTS:ObjectName="{7A55E80E-688D-4D50-9B69-ED6661B760E3}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::Prefix" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{0413DD43-BFBB-4F21-A4E1-115B2A68F029}"
          DTS:ObjectName="{0413DD43-BFBB-4F21-A4E1-115B2A68F029}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::File_Id" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{333454A7-2B19-4028-A4D7-EBB90F56FBC3}"
          DTS:ObjectName="{333454A7-2B19-4028-A4D7-EBB90F56FBC3}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::IsAppend" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{C409675F-D0EF-4703-9556-22795838557D}"
          DTS:ObjectName="{C409675F-D0EF-4703-9556-22795838557D}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::Table_Already_Exist" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Variables setting"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3E8BAEA0-A2DA-4F4B-999A-F472794CFC35}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Variables setting"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
          SQLTask:SqlStatementSource="Select p_SourceFolder as SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder as ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear as [Year]&#xA;from&#xA;(&#xA;select Parameter_Name,Parameter_Value &#xA;from Parameters&#xA;)A&#xA;PIVOT(&#xA;    MAX(Parameter_Value) &#xA;    FOR Parameter_Name IN (&#xA;        p_SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear)&#xA;) AS pivot_table;"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::P_SourceFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="1"
            SQLTask:DtsVariableName="User::P_ArchiveFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="2"
            SQLTask:DtsVariableName="User::CurrentYear" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{42DA0368-DA63-4141-BBD7-5BCA7CB322F6}"
      DTS:From="Package\Data Flow Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{E882DBF1-EE25-4E9F-85A0-9C73B7740822}"
      DTS:From="Package\Variables setting"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{F1F07A5C-FFA1-4EED-A669-A2467B954049}"
      DTS:From="Package\File Arrived Check"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Variables setting" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="236,41.6"
          Id="Package\Data Flow Task"
          TopLeft="411,186" />
        <NodeLayout
          Size="163.2,41.6"
          Id="Package\File Arrived Check"
          TopLeft="152.1428570942,92.5294117861554" />
        <NodeLayout
          Size="131.2,41.6"
          Id="Package\Foreach Loop Container\Script Task"
          TopLeft="49.5,20.5" />
        <NodeLayout
          Size="144,41.6"
          Id="Package\Foreach Loop Container\View Creation"
          TopLeft="49.5,122.5" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="118.25,62.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="230.4,220"
          Size="230.4,262.4"
          Id="Package\Foreach Loop Container"
          TopLeft="415,290" />
        <NodeLayout
          Size="156.8,41.6"
          Id="Package\Variables setting"
          TopLeft="435,87" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="529.5,228">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,62"
              Start="0,0"
              End="0,54.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,54.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="513.5,129">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.5,57"
              Start="0,0"
              End="15.5,49.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.5"
                    Point2="0,28.5"
                    Point3="4,28.5" />
                  <mssgle:LineSegment
                    End="11.5,28.5" />
                  <mssgle:CubicBezierSegment
                    Point1="11.5,28.5"
                    Point2="15.5,28.5"
                    Point3="15.5,32.5" />
                  <mssgle:LineSegment
                    End="15.5,49.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="315.3428570942,110.564705893078">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="119.6571429058,0"
              Start="0,0"
              End="112.1571429058,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="112.1571429058,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="182.4,41.6"
          Id="Package\Data Flow Task\Recordset Destination"
          TopLeft="475,201" />
        <NodeLayout
          Size="150.4,41.6"
          Id="Package\Data Flow Task\OLE DB Source"
          TopLeft="486,84" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[OLE DB Source Output]"
          TopLeft="563.5,126">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,75"
              Start="0,0"
              End="0,67.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <DtsEventHandler
    design-time-name="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="151,42"
          Id="Package\Foreach Loop Container\Script Task.EventHandlers[OnError]\Data Flow Task"
          TopLeft="532,111" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>