<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/20/2019 1:19:26 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="US-BCKND"
  DTS:CreatorName="QORDATA\syed.najib"
  DTS:DTSID="{A7A10692-1CEE-4CB2-A32D-B7016E5BDB9B}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.121"
  DTS:LocaleID="1033"
  DTS:ObjectName="File Loader excel"
  DTS:PackageType="5"
  DTS:VersionBuild="411"
  DTS:VersionGUID="{58219D9B-9E55-49EE-B86D-22D869D58DDD}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{07A107B2-E533-4A33-A2FE-93B8B8322F76}"
      DTS:ObjectName="DBConn">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DatabaseName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="Password">@[$Project::Password]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::ServerName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="UserName">@[$Project::UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;User ID=fedusr;Initial Catalog=Fed_Rep_Sol;Integrated Security=True;Application Name=SSIS-File Loader-{07A107B2-E533-4A33-A2FE-93B8B8322F76}LocalHost.Fed_Rep_Sol;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAUjQYXnPai0+jGEmQpkUdHwAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAADPBKFbJt3H1ELB/Hl6k2/rAAAAAASAAACgAAAAEAAAACy4FFncsXX/YblGZPywQxsQAAAAibErWVi9QHRS4FXm/ALFeRQAAADkGCNRuWsD4f3oX97nwykAByJDQw</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3D0D0A72-D006-4D4A-8799-CFFADBFCF599}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentYear">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E5311ECA-0D18-4F2A-9C5D-C6D95D789DAA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Filemask">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{118D172C-80EF-41E4-84FE-44E77EA0B72F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Filename">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EABC66C5-F6CC-4EDB-A8F7-91B34E5F672D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="File_Id">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{02C8F772-A43D-427C-9B3A-822E5589C81B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\syed.najib\Desktop\asads</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{11E3ED7A-E538-4418-8DFB-F30CFE677EBC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsAppend">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{20DB84FF-FA65-4425-B5DA-C321E9CD22D9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Prefix">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6E4CBE57-0970-40D2-9642-0D24042E0F15}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{06C8A453-F114-4709-950D-83484C0F9BBB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="P_SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\FederalReprting\Agg_Spend_Solution\Fed_Rep_Sol\Merz</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{68CA5808-B249-49A6-BFF9-4C215151749C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Table_Already_Existence">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{54CF4327-731D-4ED0-BBE4-A91A778CBE8E}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">Declare @Year as varchar(max) = (select parameter_value from Parameters where Parameter_Name = 'p_CurrentYear')


select concat('*',prefix,'*') as filemask , prefix, ID as File_ID, Isappend, ISNULL(b.TABLE_NAME,'Y') as Table_Already_Exist
from file_specs A
left join INFORMATION_SCHEMA.TABLES B
on 'LZ_'+@Year+'_'+PREFIX = b.TABLE_NAME
where Isenable = 1
order by len(Prefix) desc</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="{567F690F-1DCF-4B79-8574-18F7C55EBE58}:external"
                  connectionManagerRefId="Project.ConnectionManagers[LocalHost Fed_Rep_Solution]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]"
                      name="filemask"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]"
                      name="prefix"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]"
                      name="File_ID"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]"
                      name="Isappend"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      name="filemask" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="prefix" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[File_ID]"
                      dataType="i4"
                      name="File_ID" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Isappend]"
                      dataType="i4"
                      name="Isappend" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      name="Table_Already_Exist" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      codePage="1252"
                      dataType="str"
                      length="102"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[filemask]"
                      name="filemask" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[prefix]"
                      name="prefix" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[File_ID]"
                      name="File_ID" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Isappend]"
                      name="Isappend" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      dataType="wstr"
                      length="128"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[Table_Already_Exist]"
                      name="Table_Already_Exist" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Recordset Destination"
              componentClassID="Microsoft.RecordsetDestination"
              contactInfo="Recordset Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates and populates an in-memory ADO recordset that is available outside of the data flow. Scripts and other package elements can use the recordset. For example, use a recordset to store the names of files that will be loaded into the data warehouse."
              name="Recordset Destination">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the recordset."
                  name="VariableName">User::Filemask</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
                  hasSideEffects="true"
                  name="Recordset Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[filemask]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="102"
                      cachedName="filemask"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[filemask]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[prefix]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="prefix"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[prefix]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[File_ID]"
                      cachedDataType="i4"
                      cachedName="File_ID"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[File_ID]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Isappend]"
                      cachedDataType="i4"
                      cachedName="Isappend"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Isappend]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input].Columns[Table_Already_Exist]"
                      cachedDataType="wstr"
                      cachedLength="128"
                      cachedName="Table_Already_Exist"
                      lineageId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output].Columns[Table_Already_Exist]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[OLE DB Source Output]"
              endId="Package\Data Flow Task\Recordset Destination.Inputs[Recordset Destination Input]"
              name="OLE DB Source Output"
              startId="Package\Data Flow Task\OLE DB Source.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{33A7FC53-B2DB-4AFE-99AF-2377CCE23F71}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{594D106E-50FD-455D-B6A4-997B4A6FC3BA}"
        DTS:ObjectName="{594D106E-50FD-455D-B6A4-997B4A6FC3BA}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::Filemask" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\View Creation"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{6CDE263F-9393-4CF2-A4AB-1E6401903233}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="View Creation"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
              SQLTask:SqlStatementSource="BEGIN TRY&#xA;EXECUTE [dbo].[Sp_view] ?&#xA;END TRY&#xA;&#xA;BEGIN CATCH&#xA;&#xA;&#xA;insert into prefixdebug values (?)&#xA;END CATCH" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::Prefix"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::Prefix"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\xlsx files"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{1480E370-6B40-44FB-B9F2-89166485A6AD}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="xlsx files"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_1a242c287a194e36bac5eb679362ac44"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CurrentYear,User::File_Id,User::Filename,User::IsAppend,User::P_ArchiveFolder,User::P_SourceFolder,User::Prefix,User::Table_Already_Existence">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[


#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Windows.Forms;
#endregion

namespace ST_c20de9a050d848109c74ad14700a4ca5
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string SourceFolderPath = Dts.Variables["User::P_SourceFolder"].Value.ToString();
            string ArchiveFolder = Dts.Variables["User::P_ArchiveFolder"].Value.ToString();
            string File_Id = Dts.Variables["User::File_Id"].Value.ToString();
            string Filename = Dts.Variables["User::Filename"].Value.ToString();
            string Prefix = Dts.Variables["User::Prefix"].Value.ToString();
            string CurrentYear = Dts.Variables["User::CurrentYear"].Value.ToString();
            string IsAppend = Dts.Variables["User::IsAppend"].Value.ToString();
            string Table_Already_Existence = Dts.Variables["User::Table_Already_Existence"].Value.ToString();
            string TableName = Prefix;

            // NEW VARIABLES ADDED TO ENTERTAIN JIRA STORY AG-2690 //



            string FullTableName = "LZ" + "_" + CurrentYear + "_" + Prefix;
            string ExcelHeaderColumn = "";
            string SQLQueryToGetMatchingColumn = "";
            int ValidationFlag = 0;
            //MessageBox.Show(FullTableName);
            // var directory = new DirectoryInfo(SourceFolderPath);
            string[] files = Directory.GetFiles(SourceFolderPath, Filename);




            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);



            //Get one Book(Excel file at a time)
            foreach (string filename in files)
            {
                try
                {
                    ExcelHeaderColumn = "";

                    ////MessageBox.Show("File full path is " + filename);
                    string Filename_archive = filename.Replace(".xlsx", "").Replace(".xls", "");
                    if ((filename.Contains(".xlsx")) || (filename.Contains(".xls")) || (filename.Contains(".XLSX")) || (filename.Contains(".XLS")))
                    {

                        //Create Excel Connection
                        string ConStr;
                        string HDR;
                        HDR = "YES";
                        ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=1\"";

                        OleDbConnection cnn = new OleDbConnection(ConStr);

                        //Get Sheet Name
                        cnn.Open();
                        DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                        string sheetname;
                        sheetname = "";

                        //if (dtSheet.Rows.Count != Convert.ToInt32(1))

                        int sheetCount = 0;


                        foreach (DataRow dr in dtSheet.Rows)
                        {
                            if ((dr["TABLE_NAME"].ToString().Contains("$")) & (!dr["TABLE_NAME"].ToString().Contains("FilterDatabase")))
                            {
                                sheetCount = sheetCount + 1;
                            }
                        }

                        if (sheetCount != Convert.ToInt32(1))
                        {
                            string new_name_of_file = CurrentYear + '_' + filename.Replace(SourceFolderPath, "").Replace("\\", "");

                            if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                            {

                                string NoRows = "UPDATE Audit_Logs set Status=0 ,Processed_TimeStamp='" + datetime + "',[Error Description]='File has " + sheetCount.ToString() + " sheets', Start_time=GETDATE() where FileName ='" + new_name_of_file + "' and Status=5";
                                // MessageBox.Show(NoRows);
                                SqlCommand NoRowsStatement = new SqlCommand(NoRows, myADONETConnection);
                                NoRowsStatement.ExecuteNonQuery();
                            }
                            else
                            {

                                string NoRows = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status],Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "'File has " + sheetCount.ToString() + " sheets', GETDATE()" + ",0" + ",'" + datetime + "'" + ",GETDATE(),GETDATE())";
                                ////MessageBox.Show(NoRows);
                                SqlCommand NoRowsStatement = new SqlCommand(NoRows, myADONETConnection);
                                NoRowsStatement.ExecuteNonQuery();


                                string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; //filename.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                                Update_WALStatement.ExecuteNonQuery();
                            }
                            cnn.Close();



                            File.Move(filename, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx");



                        }

                        if (sheetCount == Convert.ToInt32(1))
                        {
                            foreach (DataRow drSheet in dtSheet.Rows)
                            {
                                if ((drSheet["TABLE_NAME"].ToString().Contains("$")) & (!drSheet["TABLE_NAME"].ToString().Contains("FilterDatabase")))
                                {
                                    sheetname = drSheet["TABLE_NAME"].ToString();


                                    //Display Sheet Name , you can comment it out
                                    ////MessageBox.Show(sheetname);

                                    //Load the DataTable with Sheet Data
                                    OleDbCommand oconn = new OleDbCommand("select *,'" + filename.Replace(SourceFolderPath, "").Replace("\\", "") + "' as Filename  from [" + sheetname + "]", cnn);
                                    //cnn.Open();
                                    OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                                    DataTable dt = new DataTable();
                                    adp.Fill(dt);
                                    ;


                                    //   SqlConnection myADONETConnection = new SqlConnection();
                                    //   myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);
                                    if (dt.Rows.Count == Convert.ToInt32(0))
                                    {
                                        string new_name_of_file = CurrentYear + '_' + filename.Replace(SourceFolderPath, "").Replace("\\", "");

                                        if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                        {


                                            string NoRows = "UPDATE Audit_Logs set Status=0, Processed_TimeStamp='" + datetime + "' ,[Error Description]='File has 0 rows.', Start_time = GETDATE() where FileName ='" + new_name_of_file + "' and Status=5";
                                            //MessageBox.Show(NoRows);
                                            SqlCommand NoRowsStatement = new SqlCommand(NoRows, myADONETConnection);
                                            NoRowsStatement.ExecuteNonQuery();


                                        }
                                        else
                                        {
                                            string NoRows = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status],Processed_TimeStamp,Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "'File has 0 rows.', GETDATE()" + ",0" + ",'" + datetime + "'" + ",GETDATE(),GETDATE())";
                                            ////MessageBox.Show(NoRows);
                                            SqlCommand NoRowsStatement = new SqlCommand(NoRows, myADONETConnection);
                                            NoRowsStatement.ExecuteNonQuery();

                                            string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; //filename.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                            SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                                            Update_WALStatement.ExecuteNonQuery();
                                        }

                                        cnn.Close();
                                        File.Move(filename, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx");

                                    }

                                    if (dt.Rows.Count != Convert.ToInt32(0))
                                    {
                                        string new_name_of_file = CurrentYear + '_' + filename.Replace(SourceFolderPath, "").Replace("\\", "");

                                        if (CheckFileStatusBeforeProcessing(new_name_of_file) == 1)
                                        {


                                            string logging = "UPDATE Audit_Logs set Status = 0, Processed_TimeStamp='" + datetime + "', Start_time = GETDATE() where FileName = '" + new_name_of_file + "' and Status=5";
                                            //MessageBox.Show(NoRows);
                                            SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                            loggingStatement.ExecuteNonQuery();


                                        }
                                        else
                                        {


                                            string logging = "INSERT INTO [Audit_Logs] ([FILE_ID],[FileName],[Error Description],Start_time,[Status],Insert_Date,Updated_Date) VALUES (" + File_Id + ",'" + new_name_of_file + "'," + "'', GETDATE()" + ",0,GETDATE(),GETDATE())";
                                            ////MessageBox.Show(logging);
                                            SqlCommand loggingStatement = new SqlCommand(logging, myADONETConnection);
                                            loggingStatement.ExecuteNonQuery();

                                            string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; // filename.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                                            SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                                            Update_WALStatement.ExecuteNonQuery();
                                        }
                                        if (Convert.ToInt32(IsAppend) == Convert.ToInt32(0) && Table_Already_Existence != Convert.ToString('Y'))
                                        {
                                            // ExcelHeaderColumn

                                            // AG-2690 STARTS HERE

                                            /* 
                                            LOGIC TO FIGURE OUT WHETHER TO LOAD FILE OR REJECT IT BASED ON SCHEMA STARTS HERE


                                            */

                                            for (int i = 0; i < dt.Columns.Count; i++)
                                            {
                                                if (i != dt.Columns.Count - 1)
                                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                                else
                                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                                            }
                                            ExcelHeaderColumn = ExcelHeaderColumn.Replace("|", "',");


                                            SQLQueryToGetMatchingColumn = "select STUFF((Select  ','''+Column_Name+''''  from Information_schema.Columns where Table_Name= '" + FullTableName + "' and COLUMN_NAME NOT IN ('PK_ID','isDeleted','Delete_Date') order by ORDINAL_POSITION for xml path(''),TYPE).value('.','NVARCHAR(MAX)'),1,1,'') AS ColumnList";
                                            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);
                                            //MessageBox.Show(SQLQueryToGetMatchingColumn.ToString());
                                            // break;
                                            //Get Matching Column List from SQL Server
                                            string SQLColumnList = "";
                                            SqlCommand cmd = myADONETConnection.CreateCommand();
                                            cmd.CommandText = SQLQueryToGetMatchingColumn;
                                            SQLColumnList = (string)cmd.ExecuteScalar();

                                            //MessageBox.Show("YTD EXCEL Matching Columns: " + ExcelHeaderColumn);
                                            //MessageBox.Show("YTD LZ TABLE Matching Columns: " + SQLColumnList);

                                            SQLColumnList = SQLColumnList.Replace(".", "#");
                                            SQLColumnList = SQLColumnList.Replace("!", "_");
                                            SQLColumnList = SQLColumnList.Replace("[", "(");
                                            SQLColumnList = SQLColumnList.Replace("]", ")");


                                            if (String.Equals(SQLColumnList, ExcelHeaderColumn))
                                            {
                                                ValidationFlag = 1;
                                            }
                                            else
                                            {
                                                ValidationFlag = 0;
                                            }


                                            if (ValidationFlag == 0)
                                            {
                                                string updateQuery_DML = "update Audit_Logs set status = @status, [Error Description] = @errorDescription, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE [ID] =  (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')";

                                                string errorDescription = "Please upload the file with same format as of previous files";
                                                SqlCommand updateQuery_DML_CMD = new SqlCommand(updateQuery_DML, myADONETConnection);
                                                updateQuery_DML_CMD.Parameters.AddWithValue("@status", "-1".ToString());
                                                updateQuery_DML_CMD.Parameters.AddWithValue("@errorDescription", errorDescription);

                                                //MessageBox.Show(updateQuery_DML);

                                                updateQuery_DML_CMD.ExecuteNonQuery();

                                                // MOVING THE FILE TO 'FAILED_FILES' FOLDER'
                                                cnn.Close();
                                                File.Move(filename, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx");

                                                // SKIP THIS ITERATION OF FILE
                                                continue;
                                            }


                                            // YTD FILE LOAD
                                            string DroptableDDL = "IF EXISTS (SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U') DROP TABLE [LZ_" + CurrentYear + "_" + TableName + "];";
                                            ////MessageBox.Show("Not is Append, ",DroptableDDL);
                                            SqlCommand DropStatement = new SqlCommand(DroptableDDL, myADONETConnection);
                                            DropStatement.ExecuteNonQuery();

                                            string tableDDL = "Create table [LZ_" + CurrentYear + "_" + TableName + "]";
                                            tableDDL += "(";
                                            for (int i = 0; i < dt.Columns.Count; i++)
                                            {
                                                if (i != dt.Columns.Count - 1)
                                                    tableDDL += "[" + dt.Columns[i].ColumnName + "] " + "NVarchar(max)" + ",";
                                                else
                                                    tableDDL += "[" + dt.Columns[i].ColumnName + "] " + "NVarchar(max)";
                                            }
                                            tableDDL += ")";


                                            //use ADO.NET connection to Create Table from above Definition

                                            //you can comment the ////MessageBox, it is for debugging
                                            ////MessageBox.Show(tableDDL.ToString());
                                            SqlCommand myCommand = new SqlCommand(tableDDL, myADONETConnection);
                                            myCommand.ExecuteNonQuery();

                                            string logging_1 = "UPDATE [Audit_Logs] SET [Status] = 1, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                                            ////MessageBox.Show(logging_1);
                                            SqlCommand logging_1Statement = new SqlCommand(logging_1, myADONETConnection);
                                            logging_1Statement.ExecuteNonQuery();
                                            // Comment this message, it is for debugging
                                            ////MessageBox.Show("TABLE IS CREATED");


                                            //  Load the data from DataTable to SQL Server Table.
                                            SqlBulkCopy blk = new SqlBulkCopy(myADONETConnection);
                                            blk.DestinationTableName = "[LZ_" + CurrentYear + "_" + TableName + "]";
                                            blk.WriteToServer(dt);

                                            string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                                            ////MessageBox.Show(logging_2);
                                            SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                            logging_2Statement.ExecuteNonQuery();


                                            string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                            ////MessageBox.Show(Altertable);
                                            SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection);
                                            AltertableStatement.ExecuteNonQuery();

                                            string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                            ////MessageBox.Show(Altertable);
                                            SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection);
                                            isDeleteColumnStatement.ExecuteNonQuery();

                                            string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                            ////MessageBox.Show(Altertable);
                                            SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection);
                                            deleteDateColumnStatement.ExecuteNonQuery();

                                            string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                            SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                            FileArrivedtatement.ExecuteNonQuery();

                                        }
                                        else
                                        {
                                            // APPEND FILE LOAD
                                            ////MessageBox.Show("Table exist: "+ Table_Already_Existence);
                                            if (Table_Already_Existence != Convert.ToString('Y'))
                                            {

                                                // AG-2690 STARTS HERE

                                                /* 
                                                LOGIC TO FIGURE OUT WHETHER TO LOAD FILE OR REJECT IT BASED ON SCHEMA STARTS HERE
                                                
                                                
                                                */

                                                SQLQueryToGetMatchingColumn = "select STUFF((Select  ','''+Column_Name+''''  from Information_schema.Columns where Table_Name= '" + FullTableName + "' and COLUMN_NAME NOT IN ('PK_ID','isDeleted','Delete_Date') order by ORDINAL_POSITION for xml path(''),TYPE).value('.','NVARCHAR(MAX)'),1,1,'') AS ColumnList";
                                                myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);
                                                //MessageBox.Show(SQLQueryToGetMatchingColumn.ToString());
                                                //break;
                                                //Get Matching Column List from SQL Server
                                                string SQLColumnList = "";
                                                SqlCommand cmd = myADONETConnection.CreateCommand();
                                                cmd.CommandText = SQLQueryToGetMatchingColumn;
                                                SQLColumnList = (string)cmd.ExecuteScalar();

                                                int val = SQLColumnList.IndexOf("'Filename'");

                                                if (SQLColumnList.IndexOf("'Filename'") != 0)
                                                {
                                                    dt.Columns["Filename"].SetOrdinal(dt.Columns.Count - 1);
                                                }



                                                for (int i = 0; i < dt.Columns.Count; i++)
                                                {
                                                    if (i != dt.Columns.Count - 1)
                                                        ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                                    else
                                                        ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                                                }


                                                //MessageBox.Show("APPEND EXCEL Matching Columns: " + ExcelHeaderColumn);
                                                //MessageBox.Show("APPEND LZ TABLE Matching Columns: " + SQLColumnList);
                                                //break;

                                                SQLColumnList = SQLColumnList.Replace(".", "#");
                                                SQLColumnList = SQLColumnList.Replace("!", "_");
                                                SQLColumnList = SQLColumnList.Replace("[", "(");
                                                SQLColumnList = SQLColumnList.Replace("]", ")");

                                                if (String.Equals(SQLColumnList, ExcelHeaderColumn))
                                                {
                                                    ValidationFlag = 1;
                                                }
                                                else
                                                {
                                                    ValidationFlag = 0;
                                                }


                                                if (ValidationFlag == 0)
                                                {
                                                    string updateQuery_DML = "update Audit_Logs set status = @status, [Error Description] = @errorDescription, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE [ID] = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "')";

                                                    string errorDescription = "Please upload the file with same format as of previous files";
                                                    SqlCommand updateQuery_DML_CMD = new SqlCommand(updateQuery_DML, myADONETConnection);
                                                    updateQuery_DML_CMD.Parameters.AddWithValue("@status", "-1".ToString());
                                                    updateQuery_DML_CMD.Parameters.AddWithValue("@errorDescription", errorDescription);

                                                    //MessageBox.Show(updateQuery_DML);

                                                    updateQuery_DML_CMD.ExecuteNonQuery();

                                                    // MOVING THE FILE TO 'FAILED_FILES' FOLDER'
                                                    cnn.Close();
                                                    File.Move(filename, ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + "_" + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx");

                                                    // SKIP THIS ITERATION OF FILE
                                                    continue;
                                                }
                                                //MessageBox.Show("APPEND WRONG!!");
                                                SqlBulkCopy blk = new SqlBulkCopy(myADONETConnection);
                                                blk.DestinationTableName = "[LZ_" + CurrentYear + "_" + TableName + "]";
                                                blk.WriteToServer(dt);

                                                string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(),Processed_TimeStamp = '" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                                                SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                                logging_2Statement.ExecuteNonQuery();

                                                string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                                SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                                FileArrivedtatement.ExecuteNonQuery();


                                            }
                                            else
                                            {

                                                string DroptableDDL_NE = "IF NOT EXISTS( SELECT * FROM sys.objects WHERE name = 'LZ_" + CurrentYear + "_" + TableName + "' AND type = 'U' )";
                                                string tableDDL = " Create table [LZ_" + CurrentYear + "_" + TableName + "]";
                                                tableDDL += "(";
                                                for (int i = 0; i < dt.Columns.Count; i++)
                                                {
                                                    if (i != dt.Columns.Count - 1)
                                                        tableDDL += "[" + dt.Columns[i].ColumnName + "] " + "NVarchar(max)" + ",";
                                                    else
                                                        tableDDL += "[" + dt.Columns[i].ColumnName + "] " + "NVarchar(max)";
                                                }
                                                tableDDL += ")";


                                                SqlCommand myCommand = new SqlCommand(DroptableDDL_NE + tableDDL, myADONETConnection);
                                                myCommand.ExecuteNonQuery();

                                                SqlBulkCopy blk_NE = new SqlBulkCopy(myADONETConnection);
                                                blk_NE.DestinationTableName = "[LZ_" + CurrentYear + "_" + TableName + "]";
                                                blk_NE.WriteToServer(dt);

                                                string Altertable = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add PK_ID INT IDENTITY(1,1)";
                                                ////MessageBox.Show(Altertable);
                                                SqlCommand AltertableStatement = new SqlCommand(Altertable, myADONETConnection);
                                                AltertableStatement.ExecuteNonQuery();

                                                string isDeleteColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add isDeleted INT NOT NULL default  0";
                                                ////MessageBox.Show(Altertable);
                                                SqlCommand isDeleteColumnStatement = new SqlCommand(isDeleteColumn, myADONETConnection);
                                                isDeleteColumnStatement.ExecuteNonQuery();

                                                string deleteDateColumn = "ALTER TABLE [LZ_" + CurrentYear + "_" + TableName + "] add Delete_Date datetime not null default '1800-07-16 00:00:00.000'";
                                                ////MessageBox.Show(Altertable);
                                                SqlCommand deleteDateColumnStatement = new SqlCommand(deleteDateColumn, myADONETConnection);
                                                deleteDateColumnStatement.ExecuteNonQuery();

                                                string logging_2 = "UPDATE [Audit_Logs] SET [Status] = 2, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                                                ////MessageBox.Show(logging_2);
                                                SqlCommand logging_2Statement = new SqlCommand(logging_2, myADONETConnection);
                                                logging_2Statement.ExecuteNonQuery();

                                                string FileArrived = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                                SqlCommand FileArrivedtatement = new SqlCommand(FileArrived, myADONETConnection);
                                                FileArrivedtatement.ExecuteNonQuery();



                                            }

                                        }


                                        cnn.Close();
                                        File.Move(filename, ArchiveFolder + "\\" + CurrentYear + "_" + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx");

                                        string logging_Final = "UPDATE [Audit_Logs] SET [Status] = 4, End_time = GETDATE(), Processed_TimeStamp = '" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status=2 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                                        ////MessageBox.Show(logging_Final);
                                        SqlCommand logging_FinalStatement = new SqlCommand(logging_Final, myADONETConnection);
                                        logging_FinalStatement.ExecuteNonQuery();


                                        string FileArrived_Finel = "update Parameters set Parameter_Value = '1' where Parameter_Name = 'p_NewFileArrived'";
                                        SqlCommand FileArrivedtatement_Final = new SqlCommand(FileArrived_Finel, myADONETConnection);
                                        FileArrivedtatement_Final.ExecuteNonQuery();


                                    }
                                }
                            }
                        }

                        Dts.TaskResult = (int)ScriptResults.Success;
                    }

                }

                catch (Exception e)
                {

                    // MessageBox.Show(e.Message);
                    string Filename_archive = filename.Replace(".xlsx", "").Replace(".xls", "");
                    string ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename + ";Extended Properties=\"Excel 12.0;HDR=" + "Yes" + ";IMEX=1\"";

                    string failed_Files_folder = ArchiveFolder.Replace("Archive", "Failed_Files") + "\\" + CurrentYear + '_' + (Filename_archive.Replace(SourceFolderPath, "")).Replace("\\", "") + "_" + datetime + ".xlsx";

                    //MessageBox.Show(failed_Files_folder);


                    OleDbConnection myConn = new OleDbConnection(ConStr);
                    ////MessageBox.Show(ConStr);
                    //Get Sheet Name

                    myConn.Open();


                    //   SqlConnection myADONETConnection = new SqlConnection();
                    //   myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

                    // //MessageBox.Show(e.Message);
                    string new_name_of_file = CurrentYear + '_' + filename.Replace(SourceFolderPath, "").Replace("\\", "");


                    if (e.Message.ToString() == "Could not find a part of the path.")
                    {
                        string logging_4 = "UPDATE [Audit_Logs] SET [Status] = 2,[Error Description] = 'Could not find a part of the path.', End_time = GETDATE(), Processed_TimeStamp='" + datetime + "' WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                        ////MessageBox.Show("Exception query: " + logging_4.ToString());
                        SqlCommand myCommand1 = new SqlCommand(logging_4, myADONETConnection);
                        myCommand1.ExecuteNonQuery();
                    }
                    else
                    {


                        string logging_E = "UPDATE [Audit_Logs] SET  Processed_TimeStamp = '" + datetime + "' , [Error Description] = @errorMessage , End_time = GETDATE(), [Status] = -1 WHERE ID = (SELECT MAX(ID) FROM Audit_Logs WHERE [FILE_ID] = " + File_Id + " and Status!=-1 and Delete_File_Status=0 and FileName='" + new_name_of_file + "') ";
                        ////MessageBox.Show(logging_E);
                        SqlCommand logging_EStatement = new SqlCommand(logging_E, myADONETConnection);
                        logging_EStatement.Parameters.AddWithValue("@errorMessage", e.Message);
                        logging_EStatement.ExecuteNonQuery();

                        string Update_WAL = "update A set status = 3 from WebAttachmentLogs A inner join (select FileName, max(id) as id from WebAttachmentLogs group by FileName)B on a.FileName = b.FileName and a.Id = b.id where a.FileName = '" + new_name_of_file + "'"; //filename.Replace(SourceFolderPath, "").Replace("\\", "") + "'";
                        SqlCommand Update_WALStatement = new SqlCommand(Update_WAL, myADONETConnection);
                        Update_WALStatement.ExecuteNonQuery();

                    }
                    myConn.Close();

                    File.Move(filename, failed_Files_folder);

                }
            }

        }


        public int CheckFileStatusBeforeProcessing(string currentFileName)
        {
            // MessageBox.Show(currentFileName);
            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

            SqlCommand cmd = new SqlCommand("USP_CheckFileStatusBeforeProcessing", myADONETConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@fileName", SqlDbType.NVarChar).Value = currentFileName;
            cmd.Parameters.Add("@status", SqlDbType.Int);
            cmd.Parameters["@status"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            int status = (int)cmd.Parameters["@status"].Value;
            //  MessageBox.Show(status.ToString());
            return status;
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_1a242c287a194e36bac5eb679362ac44.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8312835A-6420-4460-BA59-229C2FDF1603}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_049a15ba84244772b5e30d6d2eb53f13</RootNamespace>
    <AssemblyName>ST_1a242c287a194e36bac5eb679362ac44</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_1a242c287a194e36bac5eb679362ac44</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_1a242c287a194e36bac5eb679362ac44</msb:DisplayName>
		<msb:ProjectId>{4C6EEA68-6FF0-49CE-B2BC-0E5E4BE3AA7C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_1a242c287a194e36bac5eb679362ac44.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Settings.get_Default():ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Sett" +
    "ings")]

namespace ST_049a15ba84244772b5e30d6d2eb53f13.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_049a15ba84244772b5e30d6d2eb53f13")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_049a15ba84244772b5e30d6d2eb53f13")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_049a15ba84244772b5e30d6d2eb53f13.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_049a15ba84244772b5e30d6d2eb53f13.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_1a242c287a194e36bac5eb679362ac44.dll">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
AgAAAVcdogEJAwAAAPoBMwAWAAABAAAAPwAAAAUAAAAGAAAACgAAAAIAAABYAAAAAgAAABAAAAAC
AAAAAgAAAAMAAAAEAAAAAQAAAAUAAAABAAAAAQAAAAAAFAUBAAAAAAAGAHUDJwcGAAQEJwcGAMEC
FAcPAJsHAAAGAO4CtwUGAFgDtwUGADkDtwUGAOsDtwUGAJUDtwUGAK4DtwUGAAUDtwUGACADVgQK
AMkDuAQKABcCuAQOACkGnggGAKQBSgUOAAcGlwAOACQBiwAGAO0GHAgOAPMIiwAGADcBSgUOAAgJ
nggGAFgGSgUGAFEFSgUGAKQCFAcGAHwISgUGAJMGRwcGAHUGkgUSAHQC/gQSANUC/gQSAE4CfQUG
AIkCJwcKAOwEuAQWAOQHrQEWAC4BrQEGAHIESgUGACQJWgAWADMIrQEWAKMGrQEOAAoGYgYOALYA
lwAGAMEASgUOAPUFiwAOADMCiwAGAMoISgUGAAMASgUOAOEAnggOAMkAYgYGAGcBWgAOAMYAlwAO
AM4GlwAOANEGYgYOAMkFiwAOAHIFiwAOAN4FnggOAMEGnggOANsBiwAOAM0BiwAOALUGYgYOAEUG
iwAGAOIBSgUGAEMBSgUGAP8ItwUAAAAAUQAAAAAAAQABAAEAEABnBS0AOQABAAEAAAAQAE4Hqgdp
AAEABAAAARAA9weqB30AAwAIAAMBAABeCAAAYQAEAAsAEQBWBbcBEQAHArsBEQD0AL8BBgaDAMMB
VoBOCMYBVoDnAcYBUCAAAAAAhgBtBQYAAQBkNQAAAACGAHkETwEBABk2AAAAAIYYBwcGAAIAITYA
AAAAgxgHBwYAAgApNgAAAACTCI8GygECAFU2AAAAAJMI7wHPAQIAXDYAAAAAkwj7AdQBAgBkNgAA
AACWCIMI2gEDAGs2AAAAAIYYBwcGAAMAczYAAAAAkRgNB98BAwAAAAEAhQEAAAEAQwQJAAcHAQAR
AAcHBgAZAAcHCgApAAcHEAAxAAcHEAA5AAcHEABBAAcHEABJAAcHEABRAAcHEABZAAcHEABhAAcH
EABpAAcHBgDJAAcHBgDxAAcHFQABAQcHBgCBAOsIYQCBAHAEZgBxAFYIawAJAeAHcQARAUEFdwAZ
ASIEfgDRAHAEggAhAXUIhgApAe4HjgB5AAcHBgAJAS8IlQAxAUEFmwAJAacFfgA5ARcGogAhAewA
pwAhAQcIrQAhAXUIsgCJAAcHEABBAWIFBgBJAdkHuACJABABvQCRAGwIxwBhAfkGzQCZALQIfgCh
AEEF0gCZANII1wCpAGwCBgBpAQEA2wAhAXUI4ABxAXAEggB5AQcH5wCBARQJ7gBBAWYCBgCJAUkE
8gCRAQcH+ACZAQcH/wCRAAcHBgChATwFBgFhAcAI7gBpAQEADAFpAXAEEQEhAToJFgGRABAIHAGp
AUEFIgGxAZUBggB5ANMAKQGBAdsIEACBAYEGfgAhAQAIFgF5AT8ILwG5ATYENQEhAXUIPQGxAAcH
QwGxAGwBEACxAN8GSQEhAU4ETwGpAUEFVAGxAeEEAQAJAY8IAQC5AAQBggAhAS4JFgGBAdcBYAHZ
ASwEZwG5AbIAbAG5AUEFdgHZATcGfQHZASIEfgBxAAcHBgDRAAcHBgDpAVUBhAHpAfsIjQHZAAcH
kwH5AAcHBgAIABQArQEIABgAsgEpAHMAGgIuAAsA8gEuABMA+wEuABsAGgIuACMAIwIuACsATAIu
ADMATAIuADsATAIuAEMAIwIuAEsAUgIuAFMATAIuAFsAaQJDAGMAsgFJAHMAGgJhAHsAsgFjAGsA
sgEbAFsBAwABAAQAAwAAAJMG4wEAAA8C6AEAAIcI7QECAAUAAwACAAYABQABAAcABQACAAgABwAE
gAAAAQAAAMIh/zcAAAAAAAAJAAAABAAAAAAAAAAAAAAAmwGpAAAAAAAOAAAAAAAAAAAAAACkAZkE
AAAAAAQAAAAAAAAAAAAAAJsBiwAAAAAABAAAAAAAAAAAAAAAmwFKBQAAAAAOAAAAAAAAAAAAAACk
AWQAAAAAAAAAAAABAAAAWAcAAAUAAgAAAABUb0ludDMyAFNUXzFhMjQyYzI4N2ExOTRlMzZiYWM1
ZWI2NzkzNjJhYzQ0AFNUX2MyMGRlOWEwNTBkODQ4MTA5Yzc0YWQxNDcwMGE0Y2E1ADxNb2R1bGU+
AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0u
RGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2NvcmxpYgBBZGQAT2xlRGJTY2hlbWFHdWlkAE9sZURi
Q29tbWFuZABDcmVhdGVDb21tYW5kAFNxbENvbW1hbmQAUmVwbGFjZQBkZWZhdWx0SW5zdGFuY2UA
Z2V0X01lc3NhZ2UAR2V0T2xlRGJTY2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bv
c2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBzZXRfRGVzdGlu
YXRpb25UYWJsZU5hbWUAY3VycmVudEZpbGVOYW1lAGdldF9Db2x1bW5OYW1lAERhdGVUaW1lAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAU3FsRGJUeXBlAHNldF9Db21tYW5kVHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVB
dHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENv
bXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFz
c2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUA
Z2V0X1ZhbHVlAHNldF9WYWx1ZQBBZGRXaXRoVmFsdWUAdmFsdWUATW92ZQBJbmRleE9mAFN5c3Rl
bS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAQ2hlY2tGaWxlU3RhdHVzQmVmb3JlUHJvY2Vz
c2luZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBTZXRPcmRpbmFsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5D
b21wb25lbnRNb2RlbABTVF8xYTI0MmMyODdhMTk0ZTM2YmFjNWViNjc5MzYyYWM0NC5kbGwARmls
bABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNv
bHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNh
Y3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24AU3FsUGFyYW1ldGVy
Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5l
Y3Rpb24AU3FsQ29ubmVjdGlvbgBzZXRfRGlyZWN0aW9uAFBhcmFtZXRlckRpcmVjdGlvbgBFeGNl
cHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEN1bHR1cmVJbmZvAEV4ZWN1dGVTY2FsYXIAZ2V0X1Jl
c291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBEYlBhcmFtZXRlcgBTcWxQYXJhbWV0ZXIA
T2xlRGJEYXRhQWRhcHRlcgBXcml0ZVRvU2VydmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IA
LmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfMDQ5YTE1YmE4NDI0NDc3MmI1ZTMwZDZkMmViNTNm
MTMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzA0OWEx
NWJhODQyNDQ3NzJiNWUzMGQ2ZDJlYjUzZjEzLlByb3BlcnRpZXMAVGFibGVzAGdldF9WYXJpYWJs
ZXMAR2V0RmlsZXMAU2V0dGluZ3MARXF1YWxzAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5D
b2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAZ2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRz
AFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFz
a1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AENvbnZl
cnQATW92ZU5leHQAc2V0X0NvbW1hbmRUZXh0AGdldF9Ob3cARGF0YVJvdwBnZXRfQXNzZW1ibHkA
U3FsQnVsa0NvcHkARXhlY3V0ZU5vblF1ZXJ5AERpcmVjdG9yeQBvcF9FcXVhbGl0eQBvcF9JbmVx
dWFsaXR5AAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAApVQBzAGUAcgA6ADoAUABfAFMA
bwB1AHIAYwBlAEYAbwBsAGQAZQByAAArVQBzAGUAcgA6ADoAUABfAEEAcgBjAGgAaQB2AGUARgBv
AGwAZABlAHIAABtVAHMAZQByADoAOgBGAGkAbABlAF8ASQBkAAAdVQBzAGUAcgA6ADoARgBpAGwA
ZQBuAGEAbQBlAAAZVQBzAGUAcgA6ADoAUAByAGUAZgBpAHgAACNVAHMAZQByADoAOgBDAHUAcgBy
AGUAbgB0AFkAZQBhAHIAAB1VAHMAZQByADoAOgBJAHMAQQBwAHAAZQBuAGQAADtVAHMAZQByADoA
OgBUAGEAYgBsAGUAXwBBAGwAcgBlAGEAZAB5AF8ARQB4AGkAcwB0AGUAbgBjAGUAAAdMAFoAXwAA
A18AAAEADUQAQgBDAG8AbgBuAAALLgB4AGwAcwB4AAAJLgB4AGwAcwAACy4AWABMAFMAWAAACS4A
WABMAFMAAAdZAEUAUwAAXVAAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBD
AEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAEs7AEUA
eAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAu
ADAAOwBIAEQAUgA9AAAROwBJAE0ARQBYAD0AMQAiAAAVVABBAEIATABFAF8ATgBBAE0ARQAAAyQA
AB1GAGkAbAB0AGUAcgBEAGEAdABhAGIAYQBzAGUAAANcAABrVQBQAEQAQQBUAEUAIABBAHUAZABp
AHQAXwBMAG8AZwBzACAAcwBlAHQAIABTAHQAYQB0AHUAcwA9ADAAIAAsAFAAcgBvAGMAZQBzAHMA
ZQBkAF8AVABpAG0AZQBTAHQAYQBtAHAAPQAnAAFBJwAsAFsARQByAHIAbwByACAARABlAHMAYwBy
AGkAcAB0AGkAbwBuAF0APQAnAEYAaQBsAGUAIABoAGEAcwAgAAFhIABzAGgAZQBlAHQAcwAnACwA
IABTAHQAYQByAHQAXwB0AGkAbQBlAD0ARwBFAFQARABBAFQARQAoACkAIAB3AGgAZQByAGUAIABG
AGkAbABlAE4AYQBtAGUAIAA9ACcAAR0nACAAYQBuAGQAIABTAHQAYQB0AHUAcwA9ADUAAYEbSQBO
AFMARQBSAFQAIABJAE4AVABPACAAWwBBAHUAZABpAHQAXwBMAG8AZwBzAF0AIAAoAFsARgBJAEwA
RQBfAEkARABdACwAWwBGAGkAbABlAE4AYQBtAGUAXQAsAFsARQByAHIAbwByACAARABlAHMAYwBy
AGkAcAB0AGkAbwBuAF0ALABTAHQAYQByAHQAXwB0AGkAbQBlACwAWwBTAHQAYQB0AHUAcwBdACwA
UAByAG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAsAEkAbgBzAGUAcgB0AF8ARABh
AHQAZQAsAFUAcABkAGEAdABlAGQAXwBEAGEAdABlACkAIABWAEEATABVAEUAUwAgACgAAAUsACcA
ARknACwAJwBGAGkAbABlACAAaABhAHMAIAABLyAAcwBoAGUAZQB0AHMAJwAsACAARwBFAFQARABB
AFQARQAoACkALAAwACwAJwABLScALABHAEUAVABEAEEAVABFACgAKQAsAEcARQBUAEQAQQBUAEUA
KAApACkAAYGNdQBwAGQAYQB0AGUAIABBACAAcwBlAHQAIABzAHQAYQB0AHUAcwAgAD0AIAAzACAA
ZgByAG8AbQAgAFcAZQBiAEEAdAB0AGEAYwBoAG0AZQBuAHQATABvAGcAcwAgAEEAIABpAG4AbgBl
AHIAIABqAG8AaQBuACAAKABzAGUAbABlAGMAdAAgAEYAaQBsAGUATgBhAG0AZQAsACAAbQBhAHgA
KABpAGQAKQAgAGEAcwAgAGkAZAAgAGYAcgBvAG0AIABXAGUAYgBBAHQAdABhAGMAaABtAGUAbgB0
AEwAbwBnAHMAIABnAHIAbwB1AHAAIABiAHkAIABGAGkAbABlAE4AYQBtAGUAKQBCACAAbwBuACAA
YQAuAEYAaQBsAGUATgBhAG0AZQAgAD0AIABiAC4ARgBpAGwAZQBOAGEAbQBlACAAYQBuAGQAIABh
AC4ASQBkACAAPQAgAGIALgBpAGQAIAB3AGgAZQByAGUAIABhAC4ARgBpAGwAZQBOAGEAbQBlACAA
PQAgACcAAQMnAAEPQQByAGMAaABpAHYAZQAAGUYAYQBpAGwAZQBkAF8ARgBpAGwAZQBzAAAVcwBl
AGwAZQBjAHQAIAAqACwAJwABKycAIABhAHMAIABGAGkAbABlAG4AYQBtAGUAIAAgAGYAcgBvAG0A
IABbAAEDXQAAa1UAUABEAEEAVABFACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAHMAZQB0ACAAUwB0
AGEAdAB1AHMAPQAwACwAIABQAHIAbwBjAGUAcwBzAGUAZABfAFQAaQBtAGUAUwB0AGEAbQBwAD0A
JwABgKcnACAALABbAEUAcgByAG8AcgAgAEQAZQBzAGMAcgBpAHAAdABpAG8AbgBdAD0AJwBGAGkA
bABlACAAaABhAHMAIAAwACAAcgBvAHcAcwAuACcALAAgAFMAdABhAHIAdABfAHQAaQBtAGUAIAA9
ACAARwBFAFQARABBAFQARQAoACkAIAB3AGgAZQByAGUAIABGAGkAbABlAE4AYQBtAGUAIAA9ACcA
AUcnACwAJwBGAGkAbABlACAAaABhAHMAIAAwACAAcgBvAHcAcwAuACcALAAgAEcARQBUAEQAQQBU
AEUAKAApACwAMAAsACcAAW9VAFAARABBAFQARQAgAEEAdQBkAGkAdABfAEwAbwBnAHMAIABzAGUA
dAAgAFMAdABhAHQAdQBzACAAPQAgADAALAAgAFAAcgBvAGMAZQBzAHMAZQBkAF8AVABpAG0AZQBT
AHQAYQBtAHAAPQAnAAFZJwAsACAAUwB0AGEAcgB0AF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEA
VABFACgAKQAgAHcAaABlAHIAZQAgAEYAaQBsAGUATgBhAG0AZQAgAD0AIAAnAAGA80kATgBTAEUA
UgBUACAASQBOAFQATwAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBdACAAKABbAEYASQBMAEUAXwBJ
AEQAXQAsAFsARgBpAGwAZQBOAGEAbQBlAF0ALABbAEUAcgByAG8AcgAgAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgBdACwAUwB0AGEAcgB0AF8AdABpAG0AZQAsAFsAUwB0AGEAdAB1AHMAXQAsAEkAbgBz
AGUAcgB0AF8ARABhAHQAZQAsAFUAcABkAGEAdABlAGQAXwBEAGEAdABlACkAIABWAEEATABVAEUA
UwAgACgAAE0nACwAJwAnACwAIABHAEUAVABEAEEAVABFACgAKQAsADAALABHAEUAVABEAEEAVABF
ACgAKQAsAEcARQBUAEQAQQBUAEUAKAApACkAAQUnACwAAQN8AACAw3MAZQBsAGUAYwB0ACAAUwBU
AFUARgBGACgAKABTAGUAbABlAGMAdAAgACAAJwAsACcAJwAnACsAQwBvAGwAdQBtAG4AXwBOAGEA
bQBlACsAJwAnACcAJwAgACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBfAHMAYwBo
AGUAbQBhAC4AQwBvAGwAdQBtAG4AcwAgAHcAaABlAHIAZQAgAFQAYQBiAGwAZQBfAE4AYQBtAGUA
PQAgACcAAYE9JwAgAGEAbgBkACAAQwBPAEwAVQBNAE4AXwBOAEEATQBFACAATgBPAFQAIABJAE4A
IAAoACcAUABLAF8ASQBEACcALAAnAGkAcwBEAGUAbABlAHQAZQBkACcALAAnAEQAZQBsAGUAdABl
AF8ARABhAHQAZQAnACkAIABvAHIAZABlAHIAIABiAHkAIABPAFIARABJAE4AQQBMAF8AUABPAFMA
SQBUAEkATwBOACAAZgBvAHIAIAB4AG0AbAAgAHAAYQB0AGgAKAAnACcAKQAsAFQAWQBQAEUAKQAu
AHYAYQBsAHUAZQAoACcALgAnACwAJwBOAFYAQQBSAEMASABBAFIAKABNAEEAWAApACcAKQAsADEA
LAAxACwAJwAnACkAIABBAFMAIABDAG8AbAB1AG0AbgBMAGkAcwB0AAEDLgAAAyMAAAMhAAADWwAA
AygAAAMpAACA/XUAcABkAGEAdABlACAAQQB1AGQAaQB0AF8ATABvAGcAcwAgAHMAZQB0ACAAcwB0
AGEAdAB1AHMAIAA9ACAAQABzAHQAYQB0AHUAcwAsACAAWwBFAHIAcgBvAHIAIABEAGUAcwBjAHIA
aQBwAHQAaQBvAG4AXQAgAD0AIABAAGUAcgByAG8AcgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4ALAAg
AEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEAVABFACgAKQAsACAAUAByAG8AYwBlAHMA
cwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAgAD0AIAAnAAGAhScAIABXAEgARQBSAEUAIABbAEkA
RABdACAAPQAgACAAKABTAEUATABFAEMAVAAgAE0AQQBYACgASQBEACkAIABGAFIATwBNACAAQQB1
AGQAaQB0AF8ATABvAGcAcwAgAFcASABFAFIARQAgAFsARgBJAEwARQBfAEkARABdACAAPQAgAAFv
IABhAG4AZAAgAFMAdABhAHQAdQBzACEAPQAtADEAIABhAG4AZAAgAEQAZQBsAGUAdABlAF8ARgBp
AGwAZQBfAFMAdABhAHQAdQBzAD0AMAAgAGEAbgBkACAARgBpAGwAZQBOAGEAbQBlAD0AJwABBScA
KQABeVAAbABlAGEAcwBlACAAdQBwAGwAbwBhAGQAIAB0AGgAZQAgAGYAaQBsAGUAIAB3AGkAdABo
ACAAcwBhAG0AZQAgAGYAbwByAG0AYQB0ACAAYQBzACAAbwBmACAAcAByAGUAdgBpAG8AdQBzACAA
ZgBpAGwAZQBzAAAPQABzAHQAYQB0AHUAcwAABS0AMQABI0AAZQByAHIAbwByAEQAZQBzAGMAcgBp
AHAAdABpAG8AbgAAbUkARgAgAEUAWABJAFMAVABTACAAKABTAEUATABFAEMAVAAgACoAIABGAFIA
TwBNACAAcwB5AHMALgBvAGIAagBlAGMAdABzACAAVwBIAEUAUgBFACAAbgBhAG0AZQAgAD0AIAAn
AEwAWgBfAAFDJwAgAEEATgBEACAAdAB5AHAAZQAgAD0AIAAnAFUAJwApACAARABSAE8AUAAgAFQA
QQBCAEwARQAgAFsATABaAF8AAQVdADsAACNDAHIAZQBhAHQAZQAgAHQAYQBiAGwAZQAgAFsATABa
AF8AACFdACAATgBWAGEAcgBjAGgAYQByACgAbQBhAHgAKQAsAAAfXQAgAE4AVgBhAHIAYwBoAGEA
cgAoAG0AYQB4ACkAAICnVQBQAEQAQQBUAEUAIABbAEEAdQBkAGkAdABfAEwAbwBnAHMAXQAgAFMA
RQBUACAAWwBTAHQAYQB0AHUAcwBdACAAPQAgADEALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0AIABH
AEUAVABEAEEAVABFACgAKQAsACAAUAByAG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0A
cAAgAD0AIAAnAAF/JwAgAFcASABFAFIARQAgAEkARAAgAD0AIAAoAFMARQBMAEUAQwBUACAATQBB
AFgAKABJAEQAKQAgAEYAUgBPAE0AIABBAHUAZABpAHQAXwBMAG8AZwBzACAAVwBIAEUAUgBFACAA
WwBGAEkATABFAF8ASQBEAF0AIAA9ACAAAQcnACkAIAABCVsATABaAF8AAICnVQBQAEQAQQBUAEUA
IABbAEEAdQBkAGkAdABfAEwAbwBnAHMAXQAgAFMARQBUACAAWwBTAHQAYQB0AHUAcwBdACAAPQAg
ADIALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEAVABFACgAKQAsACAAUAByAG8A
YwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAgAD0AIAAnAAEhQQBMAFQARQBSACAAVABB
AEIATABFACAAWwBMAFoAXwAAO10AIABhAGQAZAAgAFAASwBfAEkARAAgAEkATgBUACAASQBEAEUA
TgBUAEkAVABZACgAMQAsADEAKQAAT10AIABhAGQAZAAgAGkAcwBEAGUAbABlAHQAZQBkACAASQBO
AFQAIABOAE8AVAAgAE4AVQBMAEwAIABkAGUAZgBhAHUAbAB0ACAAIAAwAACAi10AIABhAGQAZAAg
AEQAZQBsAGUAdABlAF8ARABhAHQAZQAgAGQAYQB0AGUAdABpAG0AZQAgAG4AbwB0ACAAbgB1AGwA
bAAgAGQAZQBmAGEAdQBsAHQAIAAnADEAOAAwADAALQAwADcALQAxADYAIAAwADAAOgAwADAAOgAw
ADAALgAwADAAMAAnAAGAq3UAcABkAGEAdABlACAAUABhAHIAYQBtAGUAdABlAHIAcwAgAHMAZQB0
ACAAUABhAHIAYQBtAGUAdABlAHIAXwBWAGEAbAB1AGUAIAA9ACAAJwAxACcAIAB3AGgAZQByAGUA
IABQAGEAcgBhAG0AZQB0AGUAcgBfAE4AYQBtAGUAIAA9ACAAJwBwAF8ATgBlAHcARgBpAGwAZQBB
AHIAcgBpAHYAZQBkACcAARUnAEYAaQBsAGUAbgBhAG0AZQAnAAERRgBpAGwAZQBuAGEAbQBlAACA
gycAIABXAEgARQBSAEUAIABbAEkARABdACAAPQAgACgAUwBFAEwARQBDAFQAIABNAEEAWAAoAEkA
RAApACAARgBSAE8ATQAgAEEAdQBkAGkAdABfAEwAbwBnAHMAIABXAEgARQBSAEUAIABbAEYASQBM
AEUAXwBJAEQAXQAgAD0AIAABgKVVAFAARABBAFQARQAgAFsAQQB1AGQAaQB0AF8ATABvAGcAcwBd
ACAAUwBFAFQAIABbAFMAdABhAHQAdQBzAF0AIAA9ACAAMgAsACAARQBuAGQAXwB0AGkAbQBlACAA
PQAgAEcARQBUAEQAQQBUAEUAKAApACwAUAByAG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABh
AG0AcAAgAD0AIAAnAAF1SQBGACAATgBPAFQAIABFAFgASQBTAFQAUwAoACAAUwBFAEwARQBDAFQA
IAAqACAARgBSAE8ATQAgAHMAeQBzAC4AbwBiAGoAZQBjAHQAcwAgAFcASABFAFIARQAgAG4AYQBt
AGUAIAA9ACAAJwBMAFoAXwABJScAIABBAE4ARAAgAHQAeQBwAGUAIAA9ACAAJwBVACcAIAApAAEl
IABDAHIAZQBhAHQAZQAgAHQAYQBiAGwAZQAgAFsATABaAF8AAICnVQBQAEQAQQBUAEUAIABbAEEA
dQBkAGkAdABfAEwAbwBnAHMAXQAgAFMARQBUACAAWwBTAHQAYQB0AHUAcwBdACAAPQAgADQALAAg
AEUAbgBkAF8AdABpAG0AZQAgAD0AIABHAEUAVABEAEEAVABFACgAKQAsACAAUAByAG8AYwBlAHMA
cwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAgAD0AIAAnAAFrIABhAG4AZAAgAFMAdABhAHQAdQBz
AD0AMgAgAGEAbgBkACAARABlAGwAZQB0AGUAXwBGAGkAbABlAF8AUwB0AGEAdAB1AHMAPQAwACAA
YQBuAGQAIABGAGkAbABlAE4AYQBtAGUAPQAnAAFhOwBFAHgAdABlAG4AZABlAGQAIABQAHIAbwBw
AGUAcgB0AGkAZQBzAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwADsASABEAFIAPQBZAGUAcwA7AEkA
TQBFAFgAPQAxACIAAEVDAG8AdQBsAGQAIABuAG8AdAAgAGYAaQBuAGQAIABhACAAcABhAHIAdAAg
AG8AZgAgAHQAaABlACAAcABhAHQAaAAuAACBGVUAUABEAEEAVABFACAAWwBBAHUAZABpAHQAXwBM
AG8AZwBzAF0AIABTAEUAVAAgAFsAUwB0AGEAdAB1AHMAXQAgAD0AIAAyACwAWwBFAHIAcgBvAHIA
IABEAGUAcwBjAHIAaQBwAHQAaQBvAG4AXQAgAD0AIAAnAEMAbwB1AGwAZAAgAG4AbwB0ACAAZgBp
AG4AZAAgAGEAIABwAGEAcgB0ACAAbwBmACAAdABoAGUAIABwAGEAdABoAC4AJwAsACAARQBuAGQA
XwB0AGkAbQBlACAAPQAgAEcARQBUAEQAQQBUAEUAKAApACwAIABQAHIAbwBjAGUAcwBzAGUAZABf
AFQAaQBtAGUAUwB0AGEAbQBwAD0AJwABYVUAUABEAEEAVABFACAAWwBBAHUAZABpAHQAXwBMAG8A
ZwBzAF0AIABTAEUAVAAgACAAUAByAG8AYwBlAHMAcwBlAGQAXwBUAGkAbQBlAFMAdABhAG0AcAAg
AD0AIAAnAAGBFycAIAAsACAAWwBFAHIAcgBvAHIAIABEAGUAcwBjAHIAaQBwAHQAaQBvAG4AXQAg
AD0AIABAAGUAcgByAG8AcgBNAGUAcwBzAGEAZwBlACAALAAgAEUAbgBkAF8AdABpAG0AZQAgAD0A
IABHAEUAVABEAEEAVABFACgAKQAsACAAWwBTAHQAYQB0AHUAcwBdACAAPQAgAC0AMQAgAFcASABF
AFIARQAgAEkARAAgAD0AIAAoAFMARQBMAEUAQwBUACAATQBBAFgAKABJAEQAKQAgAEYAUgBPAE0A
IABBAHUAZABpAHQAXwBMAG8AZwBzACAAVwBIAEUAUgBFACAAWwBGAEkATABFAF8ASQBEAF0AIAA9
ACAAARtAAGUAcgByAG8AcgBNAGUAcwBzAGEAZwBlAABHVQBTAFAAXwBDAGgAZQBjAGsARgBpAGwA
ZQBTAHQAYQB0AHUAcwBCAGUAZgBvAHIAZQBQAHIAbwBjAGUAcwBzAGkAbgBnAAATQABmAGkAbABl
AE4AYQBtAGUAAHFTAFQAXwAwADQAOQBhADEANQBiAGEAOAA0ADIANAA0ADcANwAyAGIANQBlADMA
MABkADYAZAAyAGUAYgA1ADMAZgAxADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1
AHIAYwBlAHMAAIwOI9HnTi9IqEPVGJ0DP/8ABCABAQgDIAABBSABARERBCABAQ4FIAEBEXVFBzQO
Dg4ODg4ODg4ODg4OCBI9EUEdDggODg4SRRJJDggSTRJRElUOElESSQ4ODhJZCA4IDhJZCA4ODhJZ
CBJdDg4OEkUOBAAAEUEEIAEODgUgABKAhQUgABKAiQYgARKAjRwDIAAcAyAADgcABA4ODg4OBgAC
HQ4ODgUgABKAmQYgARKAnRwEIAEcHAUgAg4ODgQgAQIOBQABDh0OBAYRgKkJIAISSRGAqR0cBSAA
EoCtBCAAEk0EIAEcDgMgAAIEAAEICAYAAw4ODg4GIAIBDhI9AyAACAUAAgEODgYgAgEOEkUGIAEB
EoDJBSABCBJJBAABCA4EAAEOAwUAAgIODgUgABKA1QYgARKA2QgFIAASgL0FIAASgN0HIAISgOEO
HAUAAg4ODgUgAQESPQUgAQESSQQgAQgOBiABEoDZDgQHARI9BiABARGA5QQgAQEcCSACEoDhDhGA
6QYgARKA4Q4GIAEBEYDxCAABEoD1EYD5BSAAEoD9ByACAQ4SgP0It3pcVhk04IkIiYRdzYCAzJEE
AAAAAAQBAAAAAwYSbQMGEnEDBhIQAgYIAwYRFAQAABJtBAAAEnEFAAEBEnEEAAASEAMAAAEECAAS
bQQIABJxBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAA
AAAAKAEAI1NUXzA0OWExNWJhODQyNDQ3NzJiNWUzMGQ2ZDJlYjUzZjEzAAAFAQAAAAAWAQARQ29w
eXJpZ2h0IEAgIDIwMTkAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3
b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41ALQAAADOyu++AQAAAJEAAABsU3lzdGVt
LlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs
dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNv
dXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADQZQAAAAAAAAAA
AADqZQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3GUAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBt
c2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAA
AAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAABoEAAAAAAAAAAAAABoENAAA
AFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQD/N8IhAAABAP83
wiE/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBv
AAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4A
ZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBt
AGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEA
RgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAANAA5AGEAMQA1AGIAYQA4
ADQAMgA0ADQANwA3ADIAYgA1AGUAMwAwAGQANgBkADIAZQBiADUAMwBmADEAMwAAAD4ADwABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADYANAAyAC4AMQA0ADMAMwA1AAAAAABw
ACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADEAYQAyADQAMgBjADIAOAA3AGEA
MQA5ADQAZQAzADYAYgBhAGMANQBlAGIANgA3ADkAMwA2ADIAYQBjADQANAAuAGQAbABsAAAASAAS
AAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAA
IAAyADAAMQA5AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4
ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AMQBhADIANAAyAGMA
MgA4ADcAYQAxADkANABlADMANgBiAGEAYwA1AGUAYgA2ADcAOQAzADYAMgBhAGMANAA0AC4AZABs
AGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADAANAA5AGEAMQA1AGIA
YQA4ADQAMgA0ADQANwA3ADIAYgA1AGUAMwAwAGQANgBkADIAZQBiADUAMwBmADEAMwAAAEIADwAB
AFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA2ADQAMgAuADEANAAzADMA
NQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA2
ADQAMgAuADEANAAzADMANQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAD8NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{5EA0E7F0-E7CF-43AC-B9BB-9C708AD9F922}"
          DTS:From="Package\Foreach Loop Container\xlsx files"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\View Creation" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{B7CA84DB-6118-46D4-93A1-C83BFBF6E138}"
          DTS:ObjectName="{B7CA84DB-6118-46D4-93A1-C83BFBF6E138}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::Filename" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{ADCCBC39-2EA5-4955-B1CA-456FECDDC22B}"
          DTS:ObjectName="{ADCCBC39-2EA5-4955-B1CA-456FECDDC22B}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::Prefix" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{D13400C2-023B-495C-8EFE-A5022EA99F05}"
          DTS:ObjectName="{D13400C2-023B-495C-8EFE-A5022EA99F05}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::File_Id" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{C7E6431B-4AB9-43C6-8AAA-D057B34341AB}"
          DTS:ObjectName="{C7E6431B-4AB9-43C6-8AAA-D057B34341AB}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::IsAppend" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{BEA44CCB-4B35-4CA0-8E21-2C987C60A9FF}"
          DTS:ObjectName="{BEA44CCB-4B35-4CA0-8E21-2C987C60A9FF}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::Table_Already_Existence" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Variables setting"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{79657779-54A7-4418-8166-1F3434B043E1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Variables setting"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{567F690F-1DCF-4B79-8574-18F7C55EBE58}"
          SQLTask:SqlStatementSource="Select p_SourceFolder as SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder as ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear as [Year]&#xA;from&#xA;(&#xA;select Parameter_Name,Parameter_Value &#xA;from Parameters&#xA;)A&#xA;PIVOT(&#xA;    MAX(Parameter_Value) &#xA;    FOR Parameter_Name IN (&#xA;        p_SourceFolder,&#xA;&#x9;&#x9;p_ArchiveFolder,&#xA;&#x9;&#x9;p_CurrentYear)&#xA;) AS pivot_table;&#xA;"
          SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::P_SourceFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="1"
            SQLTask:DtsVariableName="User::P_ArchiveFolder" />
          <SQLTask:ResultBinding
            SQLTask:ResultName="2"
            SQLTask:DtsVariableName="User::CurrentYear" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{49126D97-444C-4943-8AA0-AD608B5CC272}"
      DTS:From="Package\Variables setting"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{7FC49AE6-1FAA-490A-9C4C-0B8960FD10C6}"
      DTS:From="Package\Data Flow Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Foreach Loop Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="150.4,41.6"
          Id="Package\Data Flow Task"
          TopLeft="302.933333333333,121" />
        <NodeLayout
          Size="144,41.6"
          Id="Package\Foreach Loop Container\View Creation"
          TopLeft="73.2142856072407,140.617647873902" />
        <NodeLayout
          Size="119.2,41.6"
          Id="Package\Foreach Loop Container\xlsx files"
          TopLeft="89.0714285130403,31.2294125883637" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="146.942857060141,72.8294125883637">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,67.7882352855383"
              Start="0,0"
              End="0,60.2882352855383">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,60.2882352855383" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="273.6,247.2"
          Size="273.6,289.6"
          Id="Package\Foreach Loop Container"
          TopLeft="241.333333333333,200" />
        <NodeLayout
          Size="156.8,41.6"
          Id="Package\Variables setting"
          TopLeft="297.304761880433,37" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="376.919047606883,78.6">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,42.4"
              Start="0,0"
              End="0,34.9">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34.9" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="378.133333333333,162.6">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,37.4"
              Start="0,0"
              End="0,29.9">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.9" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="181.6,41.6"
          Id="Package\Data Flow Task\Recordset Destination"
          TopLeft="475,201" />
        <NodeLayout
          Size="150.4,41.6"
          Id="Package\Data Flow Task\OLE DB Source"
          TopLeft="486,84" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[OLE DB Source Output]"
          TopLeft="563.5,125.6">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,75.4"
              Start="0,0"
              End="0,67.9">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.9" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>